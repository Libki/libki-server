[% meta.title = c.loc("Administration") %]
[% SET active_class = 'administration__index' %]

<ul class="nav nav-tabs" id="primaryTabs" role="tablist">
  <li class="nav-item">
      <a class="nav-link" id="users-tab" data-toggle="tab" href="#users" role="tab" aria-controls="users" aria-selected="true"><i class="fas fa-users"></i> [% c.loc("Users") %]</a>
  </li>
  <li class="nav-item">
      <a class="nav-link active" id="clients-tab" data-toggle="tab" href="#clients" role="tab" aria-controls="clients" aria-selected="false"><i class="fas fa-desktop"></i> [% c.loc("Clients") %]</a>
  </li>
  <li class="nav-item">
      <a class="nav-link" id="reservations-tab" data-toggle="tab" href="#reservations" role="tab" aria-controls="reservations" aria-selected="false"><i class="fas fa-clock"></i> [% c.loc("Reservations") %]</a>
  </li>
  [% IF PrinterConfiguration %]
  <li class="nav-item">
      <a class="nav-link" id="prints-tab" data-toggle="tab" href="#prints" role="tab" aria-controls="prints" aria-selected="false"><i class="fas fa-print"></i> [% c.loc("Prints") %]</a>
  </li>
  [% END %]
</ul>
<div class="tab-content" id="primaryTabsContent">
  <div class="tab-pane fade" id="users" role="tabpanel" aria-labelledby="users-tab">

	<nav class="navbar navbar-expand-lg navbar-light bg-none justify-content-between">
        <ul class="navbar-nav mr-auto"></ul>
        <ul class="navbar-nav">
            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="Table actions">
                    <div id="user-table-refresh" class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon">[% c.loc("Refresh") %]</div>
                        </div>
                        <a href="#"id="user-table-refresh-button" class="btn btn-secondary form-control"><i class="fas fa-sync"></i></a>
                    </div>
                </div>
            </li>
			&nbsp; <!-- FIXME: Use CSS -->
            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="New user actions">
                    [% IF !c.config.SIP.enable || c.check_user_roles('superadmin') %]
                        <a href="#" class="new-user-button btn btn-info"><i class="fas fa-user-plus"></i> [% c.loc("New user") %]</i></a>
                    [% END %]
                    <a href="#" class="new-guest-button btn btn-primary">[% c.loc("New guest") %] <i class="fas fa-user"></i></a>
                    <a href="#" class="multi-guest-button btn btn-info">[% c.loc("Multiple guests") %] <i class="fas fa-users"></i></a>
                </div>
            </li>
        </ul>
	</nav>

        <table id="user-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
                <th>[% c.loc("Username") %]</th>
                <th>[% c.loc("Lastname") %]</th>
                <th>[% c.loc("Firstname") %]</th>
                <th>[% c.loc("Category") %]</th>
                <th>[% c.loc("Daily minutes") %]</th>
                <th>[% c.loc("Session minutes") %]</th>
                <th>[% c.loc("Status") %]</th>
                <th>[% c.loc("Notes") %]</th>
                <th>[% c.loc("Troublemaker") %]</th>
                <th>[% c.loc("Client") %]</th>
                <th>[% c.loc("Client status") %]</th>
            </thead>
        </table> 

        <div id="user-table-row-toolbar" class="table-row-toolbar" role="toolbar">
            <div class="btn-group" role="group">
                <button id="user-table-row-toolbar-edit" class="btn btn-secondary"><i class="fas fa-edit"></i> [% c.loc("Edit") %]</button>
                [% IF !c.config.SIP.enable || c.check_user_roles('superadmin') %]
                    <button id="user-table-row-toolbar-password" class="btn btn-primary"><i class="fas fa-unlock"></i> [% c.loc("Password") %]</button>
                [% END %]
                <button id="user-table-row-toolbar-troublemaker" class="btn btn-dark"><i class="fas fa-exclamation-triangle"></i> [% c.loc("Troublemaker") %]</button>
                <button id="user-table-row-toolbar-delete" class="btn btn-danger" onclick="LibkiDeleteUser( window.selected_id )"><i class="fas fa-trash-alt"></i> [% c.loc("Delete") %]</button>
            </div>
        </div>
  </div>
  <div class="tab-pane fade show active" id="clients" role="tabpanel" aria-labelledby="clients-tab">

	<nav class="navbar navbar-expand-lg navbar-light bg-none">
        <ul class="nav nav-pills" id="primary-tabs">
          <li class="nav-item">
            <a class="nav-link disabled" href="#">[% c.loc("Location") %]:</a>
          </li>
          <li class="nav-item">
              <a class="nav-link active" data-toggle="pill" href="#" onclick="ClientTableUpdateLocationFilter('');">[% c.loc("All") %]</a>
          </li>
          [% FOREACH location IN locations %]
              <li class="nav-item">
                  <a class="nav-link" data-toggle="pill" href="#" onclick="ClientTableUpdateLocationFilter(`[% location %]`);">[% location %]</a>
              </li>
          [% END %]
        </ul>

        <ul class="navbar-nav mr-auto"></ul>

        <ul class="navbar-nav">
            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="Table actions">
                    <div id="client-table-refresh" class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon">[% c.loc("Refresh") %]</div>
                        </div>
                        <a href="#" id="client-table-refresh-button" class="btn btn-secondary form-control"><i class="fas fa-sync"></i></a>
                        <div class="input-group-append">
                            <span class="input-group-text libki-refresh-counter" id="client-table-refresh-counter">30</span>
                        </div>
                    </div>
                </div>
            </li>

			&nbsp; <!-- FIXME: Use CSS -->

            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="New user actions">
                    [% IF !c.config.SIP.enable || c.check_user_roles('superadmin') %]
                        <a href="#" class="new-user-button btn btn-info"><i class="fas fa-user-plus"></i> [% c.loc("New user") %]</i></a>
                    [% END %]
                    <a href="#" class="new-guest-button btn btn-primary">[% c.loc("New guest") %] <i class="fas fa-user"></i></a>
                    <a href="#" class="multi-guest-button btn btn-info">[% c.loc("Multiple guests") %] <i class="fas fa-users"></i></a>
                </div>
            </li>
        </ul>
	</nav>

        <table id="client-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
                <th>[% c.loc("Name") %]</th>
                <th>[% c.loc("Location") %]</th>
                <th>[% c.loc("Type") %]</th>
                <th>[% c.loc("Session status") %]</th>
                <th>[% c.loc("Username") %]</th>
                [% IF ShowFirstLastNames %]
                <th>[% c.loc("Lastname") %] </th>
                <th>[% c.loc("Firstname") %] </th>
                [% END %]
                [% IF UserCategories %]
                <th>[% c.loc("Category") %]</th>
                [% END %]
                <th>[% c.loc("Daily minutes") %]</th>
                <th>[% c.loc("Session minutes") %]</th>
                <th>[% c.loc("User status") %]</th>
                <th>[% c.loc("Notes") %]</th>
                <th>[% c.loc("Troublemaker") %]</th>
                <th>[% c.loc("Reserved") %]</th>
                <th>[% c.loc("From") %]</th>
                <th>[% c.loc("Status") %]</th>
            </thead>
        </table> 

        <div id="client-table-row-toolbar" class="table-row-toolbar" role="toolbar">
            <div class="btn-group" role="group">
                <button id="client-table-row-toolbar-time" class="btn btn-secondary"><i class="fas fa-clock"></i> [% c.loc("Modify time") %]</button>
                [% IF Settings.ClientBehavior.match("RES") # Setting supports reservations %]
                <button id="client-table-row-toolbar-reserve" class="btn btn-primary" onclick="LibkiToggleReservation( window.selected_id )"><i class="fas fa-tag"></i> [% c.loc("Reserve") %]</button>
                <button id="client-table-row-toolbar-cancel" class="btn btn-secondary" onclick="LibkiShowCancelClientTab( window.selected_id )"><i class="fas fa-times"></i> [% c.loc("Cancel reservation") %]</button>
                [% END %]
                <button id="client-table-row-toolbar-unlock" class="btn btn-primary" onclick="LibkiUnlockClient( window.selected_id )"><i class="fas fa-unlock"></i> [% c.loc("Unlock") %]</button>
                <button id="client-table-row-toolbar-logout" class="btn btn-danger" onclick="LibkiLogOutClient( window.selected_id )"><i class="fas fa-sign-out-alt"></i> [% c.loc("Log out") %]</button>
                <button id="client-table-row-toolbar-status" class="btn btn-secondary"><i class="fas fa-tag"></i> [% c.loc("Switch suspension") %]</button>
                <button id="client-table-row-toolbar-delete" class="btn btn-warning" onclick="LibkiDeleteClient( window.selected_id )"><i class="fas fa-times"></i> [% c.loc("Delete") %]</button>
            </div>
        </div>
  </div>

  <div class="tab-pane fade" id="prints" role="tabpanel" aria-labelledby="prints-tab">
	<nav class="navbar navbar-expand-lg navbar-light bg-none">
        <ul class="nav nav-pills" id="primary-tabs">
          <li class="nav-item">
            <a class="nav-link disabled" href="#">[% c.loc("Location") %]:</a>
          </li>
          <li class="nav-item">
              <a class="nav-link active" data-toggle="pill" href="#" onclick="PrintTableUpdateLocationFilter('');">[% c.loc("All") %]</a>
          </li>
          [% FOREACH location IN locations %]
              <li class="nav-item">
                  <a class="nav-link" data-toggle="pill" href="#" onclick="PrintTableUpdateLocationFilter(`[% location %]`);">[% location %]</a>
              </li>
          [% END %]
        </ul>

        <ul class="navbar-nav mr-auto"></ul>

        <ul class="navbar-nav">
            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="Table actions">
                    <div id="print-table-refresh" class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon">[% c.loc("Refresh") %]</div>
                        </div>
                        <a href="#" id="print-table-refresh-button" class="btn btn-secondary form-control"><i class="fas fa-sync"></i></a>
                        <div class="input-group-append">
                            <span class="input-group-text libki-refresh-counter" id="print-table-refresh-counter">30</span>
                        </div>
                    </div>
                </div>
            </li>

			&nbsp; <!-- FIXME: Use CSS -->

            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="New user actions">
                    [% IF !c.config.SIP.enable || c.check_user_roles('superadmin') %]
                        <a href="#" class="new-user-button btn btn-info"><i class="fas fa-user-plus"></i> [% c.loc("New user") %]</i></a>
                    [% END %]
                    <a href="#" class="new-guest-button btn btn-primary">[% c.loc("New guest") %] <i class="fas fa-user"></i></a>
                    <a href="#" class="multi-guest-button btn btn-info">[% c.loc("Multiple guests") %] <i class="fas fa-users"></i></a>
                </div>
            </li>
        </ul>
	</nav>

        <table id="print-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
                <th>[% c.loc("Type") %]</th>
                <th>[% c.loc("Status") %]</th>
                <th>[% c.loc("Printer") %]</th>
                <th>[% c.loc("Copies") %]</th>
                <th>[% c.loc("File name") %]</th>
                <th>[% c.loc("Pages") %]</th>
                <th>[% c.loc("Client") %]</th>
                <th>[% c.loc("User") %]</th>
                <th>[% c.loc("Created") %]</th>
            </thead>
        </table> 

        <div id="print-table-row-toolbar" class="table-row-toolbar" role="toolbar">
            <div class="btn-group" role="group">
                <button
                    id="print-table-row-toolbar-release"
                    class="btn btn-primary"
                    onclick="LibkiReleasePrint( window.selected_id )"
                >
                    <i class="fas fa-print"></i> [% c.loc("Print") %]
                </button>

                <button
                    id="print-table-row-toolbar-refresh"
                    class="btn btn-info"
                    onclick="LibkiRefreshPrint( window.selected_id )"
                >
                    <i class="fas fa-sync"></i> [% c.loc("Refresh") %]
                </button>

                <button
                    id="print-table-row-toolbar-download"
                    class="btn btn-secondary"
                    onclick="window.open('/administration/api/printjob/view?type=download&id=' + window.selected_id, '_blank' )"
                >
                    <i class="fas fa-download"></i> [% c.loc("Download") %]
                </button>

                <button
                    id="print-table-row-toolbar-view"
                    class="btn btn-info"
                    onclick="window.open('/administration/api/printjob/view?id=' + window.selected_id, '_blank' )"
                >
                    <i class="fas fa-eye"></i> [% c.loc("View") %]
                </button>

                <button
                    id="print-table-row-toolbar-logout"
                    class="btn btn-danger"
                    onclick="LibkiCancelPrint( window.selected_id )"
                >
                    <i class="fa fa-ban"></i> [% c.loc("Cancel") %]
                </button>
            </div>
        </div>
  </div>

  <div class="tab-pane fade" id="reservations" role="tabpanel" aria-labelledby="reservations-tab">

    <nav class="navbar navbar-expand-lg navbar-light bg-none">
        <ul class="navbar-nav mr-auto"></ul>

        <ul class="navbar-nav">
            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="Table actions">
                    <div id="client-table-refresh" class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon">[% c.loc("Refresh") %]</div>
                        </div>
                        <a href="#" id="reservation-table-refresh-button" class="btn btn-secondary form-control"><i class="fas fa-sync"></i></a>
                    </div>
                </div>
            </li>

            &nbsp; <!-- FIXME: Use CSS -->

            <li class="nav-item">
                <div class="btn-group" role="group" aria-label="New user actions">
                    [% IF !c.config.SIP.enable || c.check_user_roles('superadmin') %]
                        <a href="#" class="new-user-button btn btn-info"><i class="fas fa-user-plus"></i> [% c.loc("New user") %]</i></a>
                    [% END %]
                    <a href="#" class="new-guest-button btn btn-primary">[% c.loc("New guest") %] <i class="fas fa-user"></i></a>
                    <a href="#" class="multi-guest-button btn btn-info">[% c.loc("Multiple guests") %] <i class="fas fa-users"></i></a>
                </div>
            </li>
        </ul>
    </nav>

        <table id="reservation-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
                <th>[% c.loc("Client") %]</th>
                <th>[% c.loc("User") %]</th>
                <th>[% c.loc("Begin") %]</th>
                <th>[% c.loc("End") %]</th>
            </thead>
        </table>

        <div id="reservation-table-row-toolbar" class="table-row-toolbar" role="toolbar">
            <div class="btn-group" role="group">
                <button id="reservation-table-row-toolbar-info" class="btn btn-secondary"><i class="fas fa-clock"></i> [% c.loc("Operation: ") %]</button>
                <button id="reservation-table-row-toolbar-cancel" class="btn btn-danger" onclick="LibkiShowCancelReservationTab( window.selected_id )"><i class="fas fa-times"></i> [% c.loc("Cancel reservation") %]</button>
            </div>
        </div>

</div>

<div class="modal fade" id="new-user-modal" tabindex="-1" role="dialog" aria-labelledby="new-user-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="new-user-modal-label"><i class="fas fa-user-plus"></i> [% c.loc("New user") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="new-user-modal-form" novalidate>
            <div class="form-group">
                <label for="new-user-modal-form-username">[% c.loc("Username") %]</label>
                <input type="text" class="form-control" id="new-user-modal-form-username" name="username" placeholder="[% c.loc("Username") %]" required>
                <small class="form-text text-muted">[% c.loc("Username must be unique.") %]</small>
                <div class="valid-feedback">
                    [% c.loc("Username is unique") %]
                </div>
                <div class="invalid-feedback">
                    [% c.loc("Username already used") %]
                </div>
            </div>

            [% IF ShowFirstLastNames %]
            <div class="form-group">
                <label for="new-user-modal-form-name">[% c.loc("Name") %]</label>
                <div class="row">
                  <div class="col">
                    <input class="form-control" id="new-user-modal-form-firstname" name="firstname" type="text" placeholder="[% c.loc('First name') %]">
                  </div>
                  <div class="col">
                    <input class="form-control" id="new-user-modal-form-lastname" name="lastname" type="text" placeholder="[% c.loc('Last name') %]">
                  </div>
                </div>
            </div>
            [% END %]
            [% IF UserCategories %]
            <div class="form-group">
                <label for="new-user-modal-form-category">[% c.loc("Category") %]</label>
                <select class="form-control" id="new-user-modal-form-category" name="category">
                    <option></option>
                    [% FOREACH category IN c.user_categories %]
                        <option value="[% category %]">[% category %]</option>
                    [% END %]
                </select>
            </div>
            [% END %]

            <div class="form-group">
                <label for="new-user-modal-form-password">[% c.loc("Password") %]</label>
                <input type="password" class="form-control" id="new-user-modal-form-password" name="password" placeholder="[% c.loc('Password') %]" required>
                <br/>
                <input type="password" class="form-control" id="new-user-modal-form-password-confirm" name="password-confirm" placeholder="[% c.loc('Confirm password') %]" required>
                <small class="form-text text-muted">[% c.loc("Password fields must match.") %]</small>
                <div class="valid-feedback">
                    [% c.loc("Passwords match") %]
                </div>
                <div class="invalid-feedback">
                    [% c.loc("Passwords do not match") %]
                </div>
            </div>

            <div class="form-group">
                <label for="new-user-modal-form-minutes">[% c.loc("Minutes") %]</label>
                <input type="text" class="form-control form-control-sm" id="new-user-modal-form-minutes" name="minutes" type="text" placeholder="[% DefaultTimeAllowance %]">
                <small class="form-text text-muted">[% c.loc("Leave unmodified for default amount of time.") %]</small>
                <div class="invalid-feedback">
                    [% c.loc("Is not a whole number") %]
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="new-user-modal-form-submit" class="btn btn-primary">[% c.loc("Create user") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="new-guest-modal" tabindex="-1" role="dialog" aria-labelledby="new-guest-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newGuestModelLabel"><i class="fas fa-user"></i> [% c.loc("New guest user created") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="new-guest-modal-form">
            <div class="form-group">
                <label for="new-guest-modal-form-username">[% c.loc("Username") %]</label>
                <input id="new-guest-modal-form-username" class="form-control" readonly></input>
            </div>

            <div class="form-group">
                <label for="new-guest-modal-form-password">[% c.loc("Password") %]</label>
                <input id="new-guest-modal-form-password" class="form-control" readonly></input>
            </div>

            <div class="form-group">
                <label for="new-guest-modal-form-minutes">[% c.loc("Minutes") %]</label>
                <input id="new-guest-modal-form-minutes" class="form-control" readonly></input>
            </div>

            <div class="form-group">
                <label for="new-guest-modal-form-category">[% c.loc("Category") %]</label>
                <input id="new-guest-modal-form-category" class="form-control" readonly></input>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">[% c.loc("Dismiss") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="multi-guest-modal" tabindex="-1" role="dialog" aria-labelledby="multi-guest-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel"><i class="fas fa-users"></i> [% c.loc("New guest batch created") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="multi-guest-modal-form">
            <div class="form-group">
                <label for="multi-guest-modal-form-highest">[% c.loc("Highest guest account created") %]</label>
                <input id="multi-guest-modal-form-highest" class="form-control" readonly></input>
            </div>

            <div class="form-group" readonly>
                <label for="multi-guest-modal-form-number">[% c.loc("Number of accounts created") %]</label>
                <input id="multi-guest-modal-form-number" class="form-control" readonly></input>
            </div>

            <div class="form-group" readonly>
                <label for="multi-guest-modal-form-minutes">[% c.loc("Minutes") %]</label>
                <input id="multi-guest-modal-form-minutes" class="form-control" readonly></input>
            </div>

            <div class="form-group" readonly>
                <label for="multi-guest-modal-form-category">[% c.loc("Category") %]</label>
                <input id="multi-guest-modal-form-category" class="form-control" readonly></input>
            </div>

            <a href="#" id="multi-guest-modal-form-print" class="btn btn-secondary"><i class="fa fa-print"></i> [% c.loc("View & print guest passes") %]</a>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">[% c.loc("Dismiss") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="edit-user-modal" tabindex="-1" role="dialog" aria-labelledby="edit-user-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="edit-user-modal-label">
            <i class="fas fa-edit"></i> [% c.loc("Edit user") %]
            <span class="badge badge-secondary" id="edit-user-username"></span>
          </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body">
        <form id="edit-user-modal-form">
            <ul class="nav nav-tabs" id="edit-user-modal-tabs" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active" id="edit-user-details-tab" data-toggle="tab" href="#edit-user-details" role="tab" aria-controls="edit-user-details" aria-selected="true">[% c.loc("Details") %]</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="edit-user-roles-tab" data-toggle="tab" href="#edit-user-roles" role="tab" aria-controls="edit-user-roles" aria-selected="false">[% c.loc("Roles") %]</a>
                  </li>
            </ul>
                    
            <div class="tab-content">
              <div class="tab-pane active" id="edit-user-details" role="tabpanel" aria-labelledby="edit-user-details-tab">
                <input id="edit-user-modal-form-id" name="id" type="hidden" />

                <div class="form-group">
                    <label for="edit-user-modal-form-username">[% c.loc("Username") %]</label>
                    <input class="form-control" id="edit-user-modal-form-username" name="username" type="text" placeholder="Username" readonly>
                    <small class="form-text text-muted">[% c.loc("Username may not be edited.") %]</small>
                </div>

                <div class="form-group">
                    <label for="edit-user-modal-form-name">[% c.loc("Name") %]</label>
                    <div class="row">
                      <div class="col">
                        <input class="form-control" id="edit-user-modal-form-firstname" name="firstname" type="text" placeholder="[% c.loc('First name') %]">
                      </div>
                      <div class="col">
                        <input class="form-control" id="edit-user-modal-form-lastname" name="lastname" type="text" placeholder="[% c.loc('Last name') %]">
                      </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="edit-user-modal-form-category">[% c.loc("Category") %]</label>
                    <select class="form-control" id="edit-user-modal-form-category" name="category">
                        <option></option>
                        [% FOREACH category IN c.user_categories %]
                            <option value="[% category %]">[% category %]</option>
                        [% END %]
                    </select>
                </div>

                <div class="form-group">
                    <label for="edit-user-modal-form-minutes">[% c.loc("Minutes") %]</label>
                    <input class="form-control" id="edit-user-modal-form-minutes" name="minutes" class="input-mini" type="text">
                    <small class="form-text text-muted">[% c.loc("Leave unmodified for default amount of time.") %]</small>
                </div>

                <div class="form-group">
                    <label for="edit-user-modal-form-status">[% c.loc("Status") %]</label>
                    <select class="form-control" id="edit-user-modal-form-status" name="status">
                        <option value="enabled">[% c.loc("Enabled") %]</option>
                        <option value="disabled">[% c.loc("Disabled") %]</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="edit-user-modal-form-notes">[% c.loc("Notes") %]</label>
                    <textarea class="form-control" id="edit-user-modal-form-notes" name="notes"></textarea>
                </div>
              </div>

              <div class="tab-pane" id="edit-user-roles" role="tabpanel" aria-labelledby="edit-user-roles-tab">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="edit-user-modal-form-roles-admin" value="admin" name="roles">
                    <label class="form-check-label" for="edit-user-modal-form-roles-admin">[% c.loc("Administrator") %]</label>
                </div>

                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="edit-user-modal-form-roles-superadmin" value="superadmin" name="roles">
                    <label class="form-check-label" for="edit-user-modal-form-roles-superadmin">[% c.loc("Super administrator") %]</label>
                </div>
              </div>
            </div>
        </form>
      </div>

      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="edit-user-modal-form-submit" class="btn btn-primary">[% c.loc("Update user") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modify-time-modal" tabindex="-1" role="dialog" aria-labelledby="modify-time-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modify-time-modal-label"><i class="fas fa-clock"></i> [% c.loc("Modify time") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="modify-time-modal-form" novalidate>
            <input id="modify-time-modal-form-id" name="id" type="hidden" />

            <div class="form-group">
                <label for="modify-time-modal-form-minutes">[% c.loc("Minutes") %]</label>
                <input type="text" class="form-control" id="modify-time-modal-form-minutes" name="minutes">
                <small class="form-text text-muted">[% c.loc("Add a + or - sign to increment or decrement the existing amount of time.") %]</small>
                <div class="invalid-feedback">
                    The time entered is invalid
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="modify-time-modal-form-submit" class="btn btn-primary">[% c.loc("Update time") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="make-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="make-reservation-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="make-reservation-modal-label"><i class="fas fa-tag"></i> [% c.loc("Make reservation") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="make-reservation-modal-form">
            <input id="make-reservation-modal-form-id" name="id" type="hidden" />

            <div class="form-group">
                <input id="datepicker" type="text" value="" width='400px' readonly="readonly" name="reservation_date" onchange="getHourList([% Settings.TimeDisplayFormat %])">
                <select id="reservation-hour" name="reservation_hour" onchange="getMinute()">
                </select>
                 :
                <select id="reservation-minute" name="reservation_minute">
                </select>
                <a id="make-reservation-ampm-label" style="visibility:[% IF Settings.TimeDisplayFormat == '12' %]visible[% ELSE %]hidden[% END %];"></a>
            </div>

            <div class="form-group">
                <label for="make-reservation-modal-form-username">[% c.loc("Username") %]</label>
                <input type="text" class="form-control" id="make-reservation-modal-form-username" name="username">
                <small class="form-text text-muted">[% c.loc("Username of user to make reservation for.") %]</small>
                <div class="invalid-feedback">
                    [% c.loc("Username is invalid") %]
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="make-reservation-modal-form-submit" class="btn btn-primary">[% c.loc("Make reservation") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="cancel-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="cancel-reservation-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="cancel-reservation-modal-label"><i class="fas fa-tag"></i> [% c.loc("Cancel reservation") %]</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="cancel-reservation-modal-form">
            <input id="cancel-reservation-modal-form-id" name="id" type="hidden" />
            <div class="form-group">
                <label for="cancel-reservation-modal-form-username">[% c.loc("Username") %]</label>
                <input type="text" class="form-control" id="cancel-reservation-modal-form-username" name="username">
                <small class="form-text text-muted">[% c.loc("Username of user to cancel reservation for.") %]</small>
                <div class="invalid-feedback">
                    [% c.loc("Username is invalid") %]
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button id="cancel-reservation-modal-form-submit" class="btn btn-primary">[% c.loc("Cancel reservation") %]</button>
      </div>
    </div>
  </div>
</div>

<script>
    $('#make-reservation-modal').on('shown.bs.modal', function () {
      $('#make-reservation-modal-form-username').trigger('focus');
      $('#datepicker').trigger('change');
    });

    $('#datepicker').on('change', function(){
        $("#make-reservation-ampm-label").text('');
    });

    $('#reservation-hour').on('change',function(){
        formatHour("reservation-hour","make-reservation-ampm-label");
    });

</script>
<div class="modal fade" id="change-password-modal" tabindex="-1" role="dialog" aria-labelledby="change-password-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="change-password-modal-label">
              <i class="fas fa-unlock"></i>
              [% c.loc("Change password") %]
              <span class="badge badge-secondary" id="change-password-username"></span>
          </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="change-password-modal-form">
            <input id="change-password-modal-form-id" name="id" type="hidden" />

            <div class="form-group">
                <label for="change-password-modal-form-password">[% c.loc("Password") %]</label>
                <input class="form-control" id="change-password-modal-form-password" name="password" type="password" placeholder="[% c.loc("Password") %]">
            </div>
            <div class="form-group">
                <label for="change-password-modal-form-password-confirm">[% c.loc("Confirm password") %]</label>
                <input class="form-control" id="change-password-modal-form-password-confirm" name="password-confirm" type="password" placeholder="[% c.loc("Confirm password") %]">
                <small class="form-text text-muted">[% c.loc("Password fields must match.") %]</small>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button type="button" class="btn btn-primary" id="change-password-modal-form-submit">[% c.loc("Change password") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modify-troublemaker-modal" tabindex="-1" role="dialog" aria-labelledby="modify-troublemaker-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="modify-troublemaker-modal-label">
              <i class="fas fa-lock"></i>
              [% c.loc("Set as troublemaker") %]
              <span class="badge badge-secondary" id="troublemaker-username"></span>
          </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
            <div class="form-group">
                <input id="troublemaker-user-id" name="id" type="hidden" />
                <div class="form-group">
                    <label for="change-password-modal-form-password">[% c.loc("Duration") %]</label>
                    <select class="form-control" id="troublemaker-duration">
                        <option value="1">[% c.loc("1 day") %]</option>
                        <option value="7">[% c.loc("1 week") %]</option>
                        <option value="30">[% c.loc("1 month") %]</option>
                        <option value="90">[% c.loc("3 months") %]</option>
                        <option value="365">[% c.loc("1 year") %]</option>
                        <option value="36500">[% c.loc("forever") %]</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="troublemaker-user-notes">[% c.loc("Notes") %]</label>
                <textarea class="form-control" id="troublemaker-user-notes" name="troublemaker-user-notes"></textarea>
            </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button type="button" class="btn btn-primary" id="update-troublemaker">[% c.loc("Update troublemaker") %]</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="create-new-guest-modal" tabindex="-1" role="dialog" aria-labelledby="create-new-guest-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
          <h5 class="modal-title" id="create-new-guest-modal-label">
                <div id="one-guest-title">
                    <i class="fas fa-user"></i>
                    [% c.loc("New guest") %]
                    <span class="badge badge-secondary">1</span>
                </div>
                <div id="multi-guest-title">
                    <i class="fas fa-users"></i>
                    [% c.loc("Multiple guests") %]
                    <span class="badge badge-secondary" id="count-of-guests-label">[% Settings.GuestBatchCount %]</span>
                </div>
          </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
            <div class="form-group">
                [% IF UserCategories %]
                    <div class="form-group">
                        <label for="new-guest-modal-form-category">[% c.loc("Category") %]</label>
                        <select class="form-control" id="create-new-guest-category" name="category">
                            <option value=""></option>
                        [% FOREACH category IN c.user_categories %]
                            <option value="[% category %]">[% category %]</option>
                        [% END %]
                        </select>
                    </div>
                [% END %]
            </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button type="button" class="btn btn-primary" id="create-new-guest-modal-button">[% c.loc("Create") %]</button>
        <button type="button" class="btn btn-primary" id="create-multi-guest-modal-button">[% c.loc("Create") %]</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    /**** Handle refreshing of tables ****/
    // Refresh the client and print jobs tables automatically, as its date will go stale quickly
    clientRefreshCounter = setInterval( function(){HandleClientTableRefreshCounter()}, 1000 );
    printsRefreshCounter = setInterval( function(){HandlePrintTableRefreshCounter()}, 1000 );

    // Set up the manual refresh buttons for each table
    $('#client-table-refresh-button').on( 'click', function() {
        ForceClientTableRefresh();
        return false; 
    });
    $('#user-table-refresh-button').on('click', function() {
        ForceUserTableRefresh();
        return false;
    });
    $('#print-table-refresh-button').on('click', function() {
        ForcePrintTableRefresh();
        return false;
    });
    $('#reservation-table-refresh-button').on( 'click', function() {
        ForceReservationTableRefresh();
        return false;
    });

    // When we switch tabs, refresh the new tab automatically
    $('#user-tab-label').click( function(){ ForceUserTableRefresh() });
    $('#client-tab-label').click( function(){ ForceClientTableRefresh() });
    $('#reservation-tab-label').click( function(){ ForceReservationTableRefresh() });

    /**** Initialize Datatables ****/
    // Initalize the Users table as a datatable
    uTable = $('#user-table').dataTable( {
        [% IF !c.language.match('en') %]"oLanguage": { "sUrl": "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json" },[% END %]
        "bProcessing": true,  // Indicate when the table is processing data
        "bServerSide": true,  // Indicate that the datatable gets data from a
                              // HTTP GET request
        "sAjaxSource": "[% c.uri_for('/administration/api/datatables/users') %]",  // The actual URL to call for data
        "fnDrawCallback": function(oSettings, json) {
            AddTableRowToolbar( $('#user-table-row-toolbar'), $('#user-table'), $('#user-table tbody tr') );
        },
        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
            var col = 8;
            [% UNLESS ShowFirstLastNames %]
                col = col - 2;
            [% END %]
            [% UNLESS UserCategories %]
                col = col - 1;
            [% END %]
            [% IF Settings.ThirdPartyURL %]
                if ( aData[0] ) {
                    $('td:eq(0)', nRow).html( '<a target="_blank" href="[% Settings.ThirdPartyURL %]' + aData[0] + '">' + aData[0] + '</b>' );
                }
            [% END %]
            if ( aData[8] == 'Yes') {
                    $('td:eq('+col+')', nRow).html( '<a><i class="fas fa-lock"></i>&nbsp;'+moment(aData[11]).format('lll') + '</a>' );
            }
        },
        "aoColumnDefs": [
            [% UNLESS Settings.ShowFirstLastNames %]
                { "bVisible": false, "aTargets": [ 1 ] },
                { "bVisible": false, "aTargets": [ 2 ] },
            [% END %]
            [% UNLESS UserCategories %]
                { "bVisible": false, "aTargets": [ 3 ] },
            [% END %]
        ],
    } );

    /* Add a click handler to the rows */
    $("#user-table tbody").click(function(event) {
        // Clear selection from any existing rows
        $(uTable.fnSettings().aoData).each(function (){
            $(this.nTr).removeClass('row_selected');
        });

        // Set the class for the selected row
        $(event.target.parentNode).addClass('row_selected');
    });

    // Initalize the Clients table as a datatable
    cTable = $('#client-table').dataTable( {
        [% IF !c.language.match('en') %]"oLanguage": { "sUrl": "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json" },[% END %]
        "bProcessing": true,  // Indicate when the table is processing data
        "bServerSide": true,  // Indicate that the datatable gets data from a
                              // HTTP GET request
        "sAjaxSource": "[% c.uri_for('/administration/api/datatables/clients') %]",  // The actual URL to call for data
        "fnDrawCallback": function(oSettings, json) {
            AddTableRowToolbar( $('#client-table-row-toolbar'), $('#client-table'), $('#client-table tbody tr') );
        },
        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
            [% IF Settings.ThirdPartyURL %]
                if ( aData[3] ) {
                    $('td:eq(3)', nRow).html( '<a target="_blank" href="[% Settings.ThirdPartyURL %]' + aData[3] + '">' + aData[3] + '</b>' );
                }
            [% END %]
        },
        "fnServerData": function ( sSource, aoData, fnCallback ) {
            if ( window.location_filter ) {
                aoData.push( { "name": "location_filter", "value": window.location_filter } );
            }

            $.getJSON( sSource, aoData, function (json) { 
                fnCallback(json)
            } );
        },
        "aoColumnDefs": [
            [% UNLESS Settings.ClientBehavior.match("RES") # Setting supports reservations %]
                { "bVisible": false, "aTargets": [ 9 ] },
            [% END %]
        ],
    } );

    $('#client-table-toolbar').prependTo($('#client-table_filter'));

    /* Add a click handler to the rows */
    $("#client-table tbody").click(function(event) {
        // Clear selection from any existing rows
        $(cTable.fnSettings().aoData).each(function (){
            $(this.nTr).removeClass('row_selected');
        });

        // Set the class for the selected row
        $(event.target.parentNode).addClass('row_selected');
    });

    //Initalize the Reservations table as a datatable
        rTable = $('#reservation-table').dataTable( {
        [% IF !c.language.match('en') %]"oLanguage": { "sUrl": "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json" },[% END %]
        "bProcessing": true,  // Indicate when the table is processing data
        "bServerSide": true,  // Indicate that the datatable gets data from a
                              // HTTP GET request
        "sAjaxSource": "[% c.uri_for('/administration/api/datatables/reservations') %]",  // The actual URL to call for data
        "fnDrawCallback": function(oSettings, json) {
             AddTableRowToolbar( $('#reservation-table-row-toolbar'), $('#reservation-table'), $('#reservation-table tbody tr') );
         },
     } );

    // Initalize the Print table as a datatable
    pTable = $('#print-table').DataTable( {
        [% IF !c.language.match('en') %]"oLanguage": { "sUrl": "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json" },[% END %]
        "bProcessing": true,  // Indicate when the table is processing data
        "bServerSide": true,  // Indicate that the datatable gets data from a
                              // HTTP GET request
        "sAjaxSource": "[% c.uri_for('/administration/api/datatables/prints') %]",  // The actual URL to call for data
        "order": [[ 7, "desc" ]],
        "fnDrawCallback": function(oSettings, json) {
            AddTableRowToolbar( $('#print-table-row-toolbar'), $('#print-table'), $('#print-table tbody tr') );
        },
        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
                // Type column
                $('td:eq(0)', nRow).html( aData[0].replace('google_cloud_print', 'Google Cloud Print') );

                // Status column
                $('td:eq(1)', nRow).html( aData[1].replace('In_progress', 'In progress') );

                $('td:eq(7)', nRow).html( aData[7].replace('T', ' ') );
        },
        "fnServerData": function ( sSource, aoData, fnCallback ) {
            if ( window.location_filter ) {
                aoData.push( { "name": "location_filter", "value": window.location_filter } );
            }

            $.getJSON( sSource, aoData, function (json) { 
                fnCallback(json)
            } );
        },
        "fnInitComplete": function(){
            $('#print-table-toolbar').prependTo($('#print-table_filter'));
        }
    } );

    setInterval( function(){ 
        // Only update print job states if the Prints tab is active
        if ( $("#prints-tab").hasClass("active") ) {
            let data = pTable.rows().data();
            for ( i = 0; i < data.length; i++ ) {
                status = data[i][1];

                if ( status === "Done" ) continue;
                if ( status === "Pending" ) continue;

                LibkiRefreshPrint( data[i]['DT_RowId'], true );
            }
        }
    }, 10 * 1000);

    /*********** Page Wide Actions ***********/
    // Set up the 'new user' button
    $('.new-user-button').click(function(){
        $('#user-table-row-toolbar').hide();
        $('#client-table-row-toolbar').hide();

        $('#new-user-modal-form-username').val('');
        $('#new-user-modal-form-username').removeClass('is-valid is-invalid');

        $('#new-user-modal-form-firstname').val('');
        $('#new-user-modal-form-lastname').val('');

        $('#new-user-modal-form-category').val('');

        $('#new-user-modal-form-password').val('');
        $('#new-user-modal-form-password-confirm').val('');
        $('#new-user-modal-form-password').removeClass('is-valid is-invalid');

        $('#new-user-modal-form-minutes').val('')
        $('#new-user-modal-form-minutes').removeClass('is-valid is-invalid');

        $('#new-user-modal-form-submit').removeAttr('disabled');

        $('#new-user-modal').modal();
    });
    $('#new-user-modal').on('shown.bs.modal', function () {
      $('#new-user-modal-form-username').trigger('focus')
    })

    // When a username is entered in the new user form, we need to check it for uniqueness
    $('#new-user-modal-form-username').blur( function(){ check_username_uniqueness( $(this) ) } );
    function check_username_uniqueness( element, no_errors ) {
        $.getJSON('[% c.uri_for("api/user/is_username_unique") %]/' + element.val(), function(data) {
            if ( parseInt( data.is_unique ) ) {
                $('#new-user-modal-form-submit').removeAttr('disabled');
                $('#new-user-modal-form-username').removeClass('is-invalid');
                $('#new-user-modal-form-username').addClass('is-valid');
                no_errors = true;
            } else {
                $('#new-user-modal-form-username').removeClass('is-valid');
                $('#new-user-modal-form-username').addClass('is-invalid');
                $('#new-user-modal-form-submit').attr('disabled','disabled');
                no_errors = false;
            }
        });
    }

    // Handle the new user form submission
    $('#new-user-modal-form-submit').click(function(){
        $('#new-user-modal-form-username').removeClass('is-valid is-invalid');
        $('#new-user-modal-form-password').removeClass('is-valid is-invalid');

        var no_errors = true;
        check_username_uniqueness( $('#new-user-modal-form-username'), no_errors );
        if ( ! $('#new-user-modal-form-username').val() ) {
            $('#new-user-modal-form-username').addClass('is-invalid');
            no_errors = false;
        }
        if ( $('#new-user-modal-form-password').val() != $('#new-user-modal-form-password-confirm').val() ) {
            $('#new-user-modal-form-password').addClass('is-invalid');
            no_errors = false;
        }
        if ( $('#new-user-modal-form-minutes').val() ) {
            if ( isNaN( $('#new-user-modal-form-minutes').val() ) ) {
                $('#new-user-modal-form-minutes').addClass('is-invalid');
                no_errors = false;
            }
        }

        if ( no_errors ) {
            $('#new-user-modal-form-submit').attr('disabled','disabled');

            $.post('[% c.uri_for("api/user/create") %]', $('#new-user-modal-form').serialize(), function(data) {
                $('#new-user-modal').modal('hide');

                if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("User created.") %]" );
                    $("#user-table").dataTable().fnDraw(true);
                } else {
                    DisplayMessage( "error", "[% c.loc("User not created.") %]" );
                }
            });
        }
    });

    // new guest, multi guests modal
    $('.new-guest-button').click(function(){
        $('#user-table-row-toolbar').hide();
        $('#client-table-row-toolbar').hide();

        $('#one-guest-title').show();
        $('#create-new-guest-modal-button').show();

        $('#multi-guest-title').hide();
        $('#create-multi-guest-modal-button').hide();

        $('#create-new-guest-modal').modal();
    });

    $('.multi-guest-button').click(function(){
        $('#user-table-row-toolbar').hide();
        $('#client-table-row-toolbar').hide();

        $('#one-guest-title').hide();
        $('#create-new-guest-modal-button').hide();

        $('#multi-guest-title').show();
        $('#create-multi-guest-modal-button').show();

        $('#create-new-guest-modal').modal();
    });

    // Set up the 'new guest' button
    $('#create-new-guest-modal-button').click(function(){
        $.getJSON('[% c.uri_for("api/user/create_guest") %]/?category='+$('#create-new-guest-category').val(), function(data) {
            if ( parseInt( data.success ) ) {
                $('#create-new-guest-modal').modal('hide');
                $("#user-table").dataTable().fnDraw(true);
                ForceClientTableRefresh();

                $('#user-table-row-toolbar').hide();
                $('#client-table-row-toolbar').hide();

                $('#new-guest-modal-form-username').val( data.username );
                $('#new-guest-modal-form-password').val( data.password );
                $('#new-guest-modal-form-minutes').val( data.minutes );
                $('#new-guest-modal-form-category').val( $('#create-new-guest-category').val() );

                $('#new-guest-modal').modal();
            } else {
                DisplayMessage( "error", "[% c.loc("Unable to create guest user.") %]" );
            }
        });
    });

    // Set up the 'multi guest' button
    $('#create-multi-guest-modal-button').click(function(){
        $.getJSON('[% c.uri_for("api/user/batch_create_guest") %]/?category='+$('#create-new-guest-category').val(), function(data) {
            if ( parseInt( data.success ) ) {
                $('#create-new-guest-modal').modal('hide');
                $("#user-table").dataTable().fnDraw(true);
                ForceClientTableRefresh();

                $('#user-table-row-toolbar').hide();
                $('#client-table-row-toolbar').hide();

                $('#multi-guest-modal-form-highest').val( data.highest );
                $('#multi-guest-modal-form-number').val( data.number );
                $('#multi-guest-modal-form-minutes').val( data.minutes );
                $('#multi-guest-modal-form-category').val( $('#create-new-guest-category').val() );

                guest_pass_file_contents =  $('#create-new-guest-category').val() + '</br>' + data.contents;

                $('#multi-guest-modal').modal();
            } else {
                DisplayMessage( "error", "[% c.loc("Unable to create guest user.") %]" );
            }
        });
    });
    $('#multi-guest-modal-form-print').click(function(){
        var guestPassWindow = window.open();
        guestPassWindow.document.write(guest_pass_file_contents);
    });


    /*********** Users Table ***********/
    /* Edit User */
    // Set up the 'edit user' button
    $('#user-table-row-toolbar-edit').click(function(){
        $('#user-table-row-toolbar').hide();

        $('#edit-user-modal-form-submit').removeAttr('disabled');
        $('#edit-user-modal-form-username').parent().removeClass('success warning error');

        $.getJSON('[% c.uri_for("api/user/get") %]/' + window.selected_id, function(data) {
            $('#edit-user-modal-form-username').val( data.username );
            $('#edit-user-modal-form-firstname').val( data.firstname );
            $('#edit-user-modal-form-lastname').val( data.lastname );
            $('#edit-user-modal-form-category').val( data.category );
            $('#edit-user-modal-form-minutes').val( data.minutes );
            $('#edit-user-modal-form-status').val( data.status );
            $('#edit-user-modal-form-notes').val( data.notes );

            document.getElementById("edit-user-modal-form-roles-admin").checked = false;
            document.getElementById("edit-user-modal-form-roles-superadmin").checked = false;
            $('#edit-user-modal-form-id').val( data.id );
            for ( var i in data.roles ) {
                document.getElementById( "edit-user-modal-form-roles-" + data.roles[i] ).checked = true;
            }
        });

        [% UNLESS c.check_user_roles('superadmin') %]
            $('#edit-user-modal-form-roles-admin').attr('disabled', true);
            $('#edit-user-modal-form-roles-superadmin').attr('disabled', true);
        [% END %]

        // Always start on first tab ( i.e. details tab )
        $('#edit-user-modal-tabs a:last').tab('show'); // Fixes display bug where both tabs content shows on first tab.
        $('#edit-user-modal-tabs a:first').tab('show');

        $("#edit-user-username").text($("#" + window.selected_id).children(":nth(0)").text());

        $('#edit-user-modal').modal();
    });

    // Handle the edit user form submission
    $('#edit-user-modal-form-submit').click(function(){
        var no_errors = true;

        if ( $('#edit-user-modal-form-minutes').val() ) {
            if ( isNaN( $('#edit-user-modal-form-minutes').val() ) ) {
                $('#edit-user-modal-form-minutes').parent().addClass('error');
                no_errors = false;
            }
        }

        if ( no_errors ) {
            $('#edit-user-modal-form-submit').attr('disabled','disabled');

            $.post('[% c.uri_for("api/user/update") %]', $('#edit-user-modal-form').serialize(), function(data) {
                $('#edit-user-modal').modal('hide');

                if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("User updated.") %]" );
                    $("#user-table").dataTable().fnDraw(true);
                } else {
                    DisplayMessage( "error", "[% c.loc("Unable to update user.") %]" );
                }
            });
        }
    });

    /* Modify Password */
    $('#user-table-row-toolbar-password').click(function(){
        $('#user-table-row-toolbar').hide();

        $('#change-password-modal-form-id').val('');

        $('#change-password-modal-form-password').parent().removeClass('success warning error');
        $('#change-password-modal-form-password').val('');
        $('#change-password-modal-form-password-confirm').val('');

        $('#change-password-modal-form-submit').removeAttr('disabled');

        $("#change-password-username").text($("#" + window.selected_id).children(":nth(0)").text());

        $('#change-password-modal').modal();
    });
    $('#change-password-modal').on('shown.bs.modal', function () {
        $('#change-password-modal-form-password').trigger('focus')
    })

    $('#change-password-modal-form-submit').click(function(){
        $('#change-password-modal-form-id').val( window.selected_id );

        var no_errors = true;

        if ( $('#change-password-modal-form-password').val() != $('#change-password-modal-form-password-confirm').val() ) {
            $('#change-password-modal-form-password').parent().addClass('error');
            no_errors = false;
        }

        if ( no_errors ) {
            $('#change-password-modal-form-submit').attr('disabled','disabled');

            $.post('[% c.uri_for("api/user/change_password") %]', $('#change-password-modal-form').serialize(), function(data) {
                $('#change-password-modal').modal('hide');

                if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("Password changed.") %]" );
                    $("#user-table").dataTable().fnDraw(true);
                } else {
                    if ( data.message ) {
                        if ( data.message == 'ADMIN_CANNOT_CHANGE_SUPERADMIN_PASSWORD' ) {
                            DisplayMessage( "error", "[%c.loc("Administrators cannot change a super administrator password.") %]" );
                        }
                    }
                    else {
                        DisplayMessage( "error", "[% c.loc("Unable to change password.") %]" );
                    }
                }
            });
        }
    });

    /* Toggle troublemaker */
    $('#user-table-row-toolbar-troublemaker').click(function(){
        var col=8;
        [% UNLESS ShowFirstLastNames %]
            col = col - 2;
        [% END %]
        [% UNLESS UserCategories %]
            col = col - 1;
        [% END %]

        if ($("#" + window.selected_id).children(":nth("+col+")").text() !='No'){
            var url = '[% c.uri_for("api/user/toggle_troublemaker") %]/' + window.selected_id+'/0/0';
            UpdateTroublemaker(url);
        }
        else {
            $("#troublemaker-user-id").val( window.selected_id );
            $("#troublemaker-username").text($("#" + window.selected_id).children(":nth(0)").text());
            $("#troublemaker-user-notes").val($("#" + window.selected_id).children(":nth("+(col - 1)+")").text());
            $('#user-table-row-toolbar').hide();
            $('#modify-troublemaker-modal').modal();
        }
    });

    $('#update-troublemaker').click(function(){
        var url = '[% c.uri_for("api/user/toggle_troublemaker") %]/' + $("#troublemaker-user-id").val()+'/'+$("#troublemaker-duration").val()+'/'+$("#troublemaker-user-notes").val()+' /';
        UpdateTroublemaker(url);
        $("#modify-troublemaker-modal").modal("hide");
    });

    function UpdateTroublemaker(url){
        $.getJSON(url, function(data) {
            if ( parseInt( data.success ) ) {
                DisplayMessage( "success", "[% c.loc("Troublemaker status updated.") %]" );
                $("#user-table").dataTable().fnDraw(true);
            } else {
                DisplayMessage( "error", "[% c.loc("Unable to update troublemaker status.") %]" );
            }
        });
    }

    /*********** Client Table ***********/
    /* Modify Time */
    $('#modify-time-modal-form-submit').click(function(){
        var errors = false;

        if ( $('#modify-time-modal-form-minutes').val() ) {
            if ( isNaN( $('#modify-time-modal-form-minutes').val() ) ) {
                errors = true;
            }
        } else {
            errors = true;
        }

        if ( errors ) {
            $('#modify-time-modal-form-minutes').addClass('is-invalid');
        } else {
            $('#modify-time-modal-form-submit').attr('disabled','disabled');

            $.post('[% c.uri_for("api/client/modify_time") %]', $('#modify-time-modal-form').serialize(), function(data) {
                $('#modify-time-modal').modal('hide');

                if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("User's time updated.") %]" );
                    ForceClientTableRefresh();
                } else {
                    DisplayMessage( "error", "[% c.loc("Unable to update user's time.") %]" );
                }
            });
        }
    });

    $("#modify-time-modal-form-minutes").keypress(function(e){
        if (e.which == 13) {
            e.preventDefault();
            $('#modify-time-modal-form-submit').click();
        }
    });

    /* Toggle client status */
    $('#client-table-row-toolbar-status').click(function(){
        $.getJSON('[% c.uri_for("api/client/toggle_status") %]/' + window.selected_id, function(data) {
            if ( parseInt( data.success ) ) {
                    DisplayMessage( "success", "[% c.loc("Client status switched.") %]" );
                    $("#client-table").dataTable().fnDraw(true);
            } else {
                    DisplayMessage( "error", "[% c.loc("Unable to switch client status.") %]" );
            }
        });
    });

    /* Make reservation */
    $('#make-reservation-modal-form-submit').click(function(){
        let username = $('#make-reservation-modal-form-username').val();
        if ( username ) {
            let id = $('#make-reservation-modal-form-id').val();
            $.post('[% c.uri_for('/administration/api/client/reservation') %]' + '/' + id + '?action=reserve', $('#make-reservation-modal-form').serialize(), function(data) {
                $('#make-reservation-modal').modal('hide');

                if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("Reservation for user created.") %]" );
                    ForceClientTableRefresh();
                    ForceReservationTableRefresh();
                } else {
                     if ( data.reason == 'USER_ALREADY_RESERVED' ) {
                         DisplayMessage( "error", "[% c.loc("Unable to make reservation: User already has a reservation.") %]" );
                     } else if ( data.reason == 'USER_NOT_FOUND' ) {
                         DisplayMessage( "error", "[% c.loc('Unable to make reservation: User not found.') %]" );
                     } else if ( data.reason == 'NO_TIME' ) {
                         DisplayMessage( "error", "[% c.loc('Unable to make reservation: The user has no time remaining..') %]" );
                     } else if ( data.reason == 'INVALID_TIME' ) {
                         DisplayMessage( "error", "[% c.loc('Unable to make reservation: The time you choose is not available.') %]" );
                     } else if ( data.reason == 'CLOSING_TIME' ) {
                         DisplayMessage( "error", "[% c.loc('Unable to make reservation: This kiosk will be closed for the time..') %]" );
                     } else {
                         DisplayMessage( "error", "[% c.loc("Unable to make reservation: Reason unknown.") %]" );
                     }
                }
            });
        } else {
            $('#make-reservation-modal-form-username').addClass('is-invalid');
        }
    });

    $("#make-reservation-modal-form-username").keypress(function(e){
        if (e.which == 13) {
            e.preventDefault();
            $('#make-reservation-modal-form-submit').click();
        }
    });

    /* Cancel reservation */
    $('#cancel-reservation-modal-form-submit').click(function(){
        let username = $('#cancel-reservation-modal-form-username').val();
        if ( username ) {
            let id = $('#cancel-reservation-modal-form-id').val();
            $.post('[% c.uri_for('/administration/api/client/reservation') %]' + '/' + id + '?action=cancel', $('#cancel-reservation-modal-form').serialize(), function(data) {
                $('#cancel-reservation-modal').modal('hide');
                 if ( data.success ) {
                    DisplayMessage( "success", "[% c.loc("Reservation for user canceled.") %]" );
                    ForceReservationTableRefresh();
                    ForceClientTableRefresh();
                } else {
                         DisplayMessage( "error", "[% c.loc( "The cancellation failed" ) %]" );
                }
            });
        } else {
            $('#make-reservation-modal-form-username').addClass('is-invalid');
        }
    });

    $("#cancel-reservation-modal-form-username").keypress(function(e){
        if (e.which == 13) {
            e.preventDefault();
            $('#cancel-reservation-modal-form-submit').click();
        }
    });

    $('#client-table-row-toolbar-time').click(function(){
        $('#client-table-row-toolbar').hide();

        $('#modify-time-modal-form-id').val( window.selected_id );

        $('#modify-time-modal-form-minutes').val('');
        $('#modify-time-modal-form-minutes').removeClass('is-valid is-invalid');

        $('#modify-time-modal').modal();

    });
    $('#modify-time-modal').on('shown.bs.modal', function () {
      $('#modify-time-modal-form-minutes').trigger('focus')
      $('#modify-time-modal-form-submit').removeAttr('disabled');
    })

});

/*********** Helper Functions ***********/

// Add a filter for a specific column
function filter_woo() {
    var t = $('#user-table').dataTable();

    // In this case, only search if the <input> value is long enough (stops
    // stupid searches on single chars)
    if ( $('#filter_woo').val().length > 3 ) {
        t.fnFilter($('#filter_woo').val(),0);
    }
    else {
        t.fnFilter('',0);
    };
}

function LibkiDeleteUser( id ) {
  if ( confirm("[% c.loc("Are you sure you want to delete this user?") %]") ) {
    $.getJSON( '[% c.uri_for('/administration/api/user/delete') %]' + '/' + id, function( data ) {
         if ( data.success ) {
             DisplayMessage( "success", "[% c.loc("User deleted.") %]" );
             // Refresh the table to remove the deleted row
             $("#user-table").dataTable().fnDraw(true);
         } else {
             if ( data.message ) {
                 if ( data.message == 'ADMIN_CANNOT_DELETE_SUPERADMIN' ) {
                     DisplayMessage( "error", "[% c.loc("Administrators cannot delete super administrators.") %]" );
                 }
             } else {
                 DisplayMessage( "error", "[% c.loc("Unable to delete user.") %]" );
             }
         }
    });
  }
}

function LibkiDeleteClient( id ) {
  if ( confirm("[% c.loc("Once deleted, all the reservations of this client will be removed at the same time.") %]") ) {
    $.getJSON( '[% c.uri_for('/administration/api/client/delete_client') %]' + '/' + id, function( data ) {
         if ( data.success ) {
             DisplayMessage( "success", "[% c.loc("Client deleted.") %]" );
             // Refresh the table to remove the deleted row
             $("#client-table").dataTable().fnDraw(true);
             $("#reservation-table").dataTable().fnDraw(true);
         } else {
             DisplayMessage( "error", "[% c.loc("Unable to delete client.") %]" );
         }
    });
  }
}

function LibkiLogOutClient( id ) {
  if ( confirm("[% c.loc("Are you sure you want to log this user out?") %]") ) {
    $.getJSON( '[% c.uri_for('/administration/api/client/logout') %]' + '/' + id, function(data) {
         if ( data.success ) {
             DisplayMessage( "success", "[% c.loc("Logged user out.") %]" );
             // Refresh the table to remove the deleted row
             $("#client-table").dataTable().fnDraw(true);
         } else {
             DisplayMessage( "error", "[% c.loc("Unable to log user out.") %]" );
         }
     });
  }
}

function LibkiUnlockClient( id ) {
  if ( confirm("[% c.loc("Are you sure you want to unlock this client?") %]") ) {
    $.getJSON( '[% c.uri_for('/administration/api/client/unlock') %]' + '/' + id, function(data) {
         if ( data.success ) {
             DisplayMessage( "success", "[% c.loc("Client unlocked.") %]" );
             $("#client-table").dataTable().fnDraw(true);
         } else {
             DisplayMessage( "error", "[% c.loc("Unable to unlock client.") %]" );
         }
     });
  }
}

function LibkiShowCancelClientTab( id ) {
    $('#cancel-reservation-modal-form-username').removeAttr("readonly");
    $('#cancel-reservation-modal-form-username').removeClass('is-invalid');
    $('#client-table-row-toolbar').hide();
    $('#cancel-reservation-modal-form-id').val( id );
    $('#cancel-reservation-modal-form-username').val("");
    $('#cancel-reservation-modal').modal();
    $('#cancel-reservation-modal-form-username').focus();
}

 function LibkiShowCancelReservationTab( id ) {
     $('#cancel-reservation-modal-form-username').removeClass('is-invalid');
     $('#client-table-row-toolbar').hide();
     $('#cancel-reservation-modal-form-id').val( id );
     $('#cancel-reservation-modal-form-username').val(id);
     $('#cancel-reservation-modal-form-username').attr("readonly","readonly");
     $('#cancel-reservation-modal').modal();
     $('#cancel-reservation-modal-form-username').focus();
 }

function LibkiToggleReservation( id ) {
    setTime();
    $('#make-reservation-modal-form-username').removeClass('is-invalid');
    $('#client-table-row-toolbar').hide();

    $('#make-reservation-modal-form-id').val( window.selected_id );
    $('#make-reservation-modal-form-username').val("");

    $('#make-reservation-modal').modal();
    $('#make-reservation-modal-form-username').focus();
}

function HandleClientTableRefreshCounter() {
    var countdown = parseInt( $('#client-table-refresh-counter').text() ) - 1;

    if ( countdown ) {
        $('#client-table-refresh-counter').text( countdown );
    } else {
        ForceClientTableRefresh();
    }
}

function ClientTableUpdateLocationFilter( location ) {
    window.location_filter = location;
    ForceClientTableRefresh();
}

function ForceClientTableRefresh() {
     $("#client-table").dataTable().fnDraw(true);
     $('#client-table-refresh-counter').text( '30' );
}

function ForceUserTableRefresh() {
     $("#user-table").dataTable().fnDraw(true);
}

function ForceReservationTableRefresh() {
     $("#reservation-table").dataTable().fnDraw(true);
}

function HandlePrintTableRefreshCounter() {
    var countdown = parseInt( $('#print-table-refresh-counter').text() ) - 1;

    if ( countdown ) {
        $('#print-table-refresh-counter').text( countdown );
    } else {
        ForcePrintTableRefresh();
    }
}

function PrintTableUpdateLocationFilter( location ) {
    window.location_filter = location;
    ForcePrintTableRefresh();
}

function ForcePrintTableRefresh() {
     $("#print-table").dataTable().fnDraw(true);
     $('#print-table-refresh-counter').text( '30' );
}

function LibkiReleasePrint( print_job_id ) {
    $.getJSON('[% c.uri_for("api/printjob/release") %]', { id: print_job_id }, function(data) {
        if ( data.success ) {
            DisplayMessage( "success", data.message );
            ForcePrintTableRefresh();
        } else {
            DisplayMessage( "error", "[% c.loc("Failed to release print job: ") %]" + data.error );
        }
    });
}

function LibkiRefreshPrint( print_job_id, no_refresh ) {
    $.getJSON('[% c.uri_for("api/printjob/update") %]', { id: print_job_id }, function(data) {
        if ( data.success ) {
            if ( ! no_refresh ) {
                DisplayMessage( "success", "[% c.loc("Print job refreshed") %]: " + print_job_id );
                ForcePrintTableRefresh();
            }
        } else {
            DisplayMessage( "error", data.data );
        }
    });
}

function LibkiCancelPrint( print_job_id ) {
    if ( confirm('Are you sure you want to cancel this print job?')){
        $.getJSON('[% c.uri_for("api/printjob/cancel") %]', { id: print_job_id }, function(data) {
            if ( data.success ) {
                DisplayMessage( 'success', 'Print job has been canceled.' );
                ForcePrintTableRefresh();
            } else {
                DisplayMessage( 'error', 'Failed to cancel print job.');
            }
        });
    }
}

function postForm(url, fields) {
    var $form = $('<form>', {
        action: url,
        method: 'post',
        target: '_blank'
    });
    $.each(fields, function(key, val) {
         $('<input>').attr({
             type: "hidden",
             name: key,
             value: val
         }).appendTo($form);
    });
    $form.submit();
}

$('#datepicker').datepicker({
    dateFormat:'yy-mm-dd',
    minDate:'%y-%M-%d',
    gotoCurrent: true,
});
$("#datepicker").datepicker("setDate", new Date());

function getHourList(format) {
    getTime("[% c.uri_for("/api/public/reservations/gettimelist") %]",format);
}
</script>
