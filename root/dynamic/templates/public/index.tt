[% SET active_class = "public__index" %]
[% USE UTF8Decode %]

<!-- We don't need this for the time being, but may later
<ul class="nav nav-tabs" id="primary-tabs">
    <li class="active">
        <a id="client-tab-label" data-toggle="tab" href="#clients-tab">[% c.loc("Clients") %]</a>
    </li>
</ul>
-->

<div class="tab-content">
  <div class="tab-pane active" id="clients-tab">
        <ul class="nav nav-pills" id="primary-tabs">
          <li>
              <a>[% c.loc("Location") %]: </a>
          </li>
          <li class="active">
              <a data-toggle="tab" href="#" onclick="ClientTableUpdateLocationFilter('');">[% c.loc("All") %]</a>
          </li>
          [% FOREACH location IN locations %]
              <li>
                  <a data-toggle="tab" href="#" onclick="ClientTableUpdateLocationFilter('[% location %]');">[% location | utf8_decode | utf8_decode %]</a>
              </li>
          [% END %]
        </ul>

        <table id="client-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
                <th>[% c.loc("Client") %]</th>
                <th>[% c.loc("Location") %]</th>
                <th>[% c.loc("Status") %]</th>
                <th>[% c.loc("Time remaining") %]</th>
                <th>[% c.loc("Reservation status") %]</th>
            </thead>
        </table> 

        <div id="client-table-row-toolbar" class="table-row-toolbar btn-group">
            [% IF Settings.ClientBehavior.match("RES") # Setting supports reservations %]
                <button id="client-table-row-toolbar-make-reservation" class="btn btn-inverse">
                    <i class="icon-plus-sign icon-white"></i> [% c.loc("Make reservation") %]
                </button>

                <button id="client-table-row-toolbar-cancel-reservation" class="btn btn-danger">
                    <i class="icon-minus-sign icon-white"></i> [% c.loc("Cancel reservation") %]
                </button>
            [% END %]
        </div>
  </div>
</div>

<div class="modal hide" id="make-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="make-reservation-modal-label" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button>
        <h3 id="make-reservation-modal-label">[% c.loc("Make reservation for") %] <i><span id="make-reservation-modal-for"></span></i></h3>
    </div>

    <div class="modal-body">
        <form id="make-reservation-modal-form" class="form-horizontal">
            <input id="make-reservation-modal-form-id" name="id" type="hidden" />

            <div class="control-group">
                <label class="control-label" for="make-reservation-username">[% c.loc("Username") %]</label>
                <div class="controls">
                    <input type="text" id="make-reservation-username" name="username" />
                </div>
            </div>

            <div class="control-group">
                <label class="control-label" for="make-reservation-password">[% c.loc("Password") %]</label>
                <div class="controls">
                    <input type="password" id="make-reservation-password" name="password" />
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="make-reservation-modal-form-submit" class="btn btn-primary">[% c.loc("Make reservation") %]</button>
    </div>
</div>

<div class="modal hide" id="cancel-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="cancel-reservation-modal-label" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button>
        <h3 id="cancel-reservation-modal-label">[% c.loc("Cancel reservation") %] <i><span id="cancel-reservation-modal-for"></span></i></h3>
    </div>

    <div class="modal-body">
        <form id="cancel-reservation-modal-form" class="form-horizontal">
            <input id="cancel-reservation-modal-form-id" name="id" type="hidden" />

            <div class="control-group">
                <label class="control-label" for="cancel-reservation-password">[% c.loc("Password") %]</label>
                <div class="controls">
                    <input type="password" id="cancel-reservation-password" name="password" />
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">[% c.loc("Cancel") %]</button>
        <button id="cancel-reservation-modal-form-submit" class="btn btn-primary">[% c.loc("Cancel reservation") %]</button>
    </div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    // Initalize the Clients table as a datatable
    cTable = $("#client-table").dataTable( {
        [% IF !c.language.match('en') %]"oLanguage": { "sUrl": "http://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json" },[% END %]
        "bPaginate": false,
        "bFilter": false, // Hide the search form
        "bProcessing": false,  // Indicate when the table is processing data
        "bServerSide": true,  // Indicate that the datatable gets data from a
                              // HTTP GET request
        "sDom": "<'row'<'span6'l><'span6 float-right'f>r>t<'row'<'span6'><'span6'p>>",
        "sAjaxSource": "[% c.uri_for("/api/public/datatables/clients") %]",  // The actual URL to call for data
        "sPaginationType": "bootstrap",
        "fnDrawCallback": function(oSettings, json) {
            AddTableRowToolbar( $("#client-table-row-toolbar"), $("#client-table"), $("#client-table tbody tr") );
        },
        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
            if ( aData[2] ) {
                var status;
                $("td:eq(1)", nRow).html( "[% c.loc("In use") %]" );
            } else {
                $("td:eq(1)", nRow).html( "[% c.loc("Available") %]" );
            }

            if ( aData[3] ) {
                $("td:eq(2)", nRow).html( aData[3] + " " + "[% c.loc("Minutes") %]" );
            }

            if ( Boolean( aData[4] ) ) {
                if ( [% Settings.ReservationShowUsername %] ) {
                    $("td:eq(3)", nRow).html( "[% c.loc("Reserved by") %]" + " " + "<i>" + aData[4] + "</i>" );
                }
                else {
                    $("td:eq(3)", nRow).html( "[% c.loc("Reserved") %]" );
                }
            }
        },
        "fnServerData": function ( sSource, aoData, fnCallback ) {
            if ( window.location_filter ) {
                aoData.push( { "name": "location_filter", "value": window.location_filter } );
            }

            $.getJSON( sSource, aoData, function (json) { 
                fnCallback(json)
            } );
        },
        "fnDrawCallback": function ( oSettings, json ) {
            AddTableRowToolbar( $("#client-table-row-toolbar"), $("#client-table"), $("#client-table tbody tr") );

            if ( oSettings.aiDisplay.length == 0 ) {
                return;
            }

            var nTrs = $("#client-table tbody tr");
            var iColspan = nTrs[0].getElementsByTagName("td").length;
            var sLastGroup = "";

            for ( var i=0 ; i<nTrs.length ; i++ ) {
                var iDisplayIndex = oSettings._iDisplayStart + i;
                var sGroup = oSettings.aoData[ oSettings.aiDisplay[iDisplayIndex] ]._aData[1];

                if ( sGroup != sLastGroup ) {
                    var nGroup = document.createElement( "tr" );
                    var nCell = document.createElement( "td" );
                    nCell.colSpan = iColspan;
                    nCell.className = "group";
                    nCell.innerHTML = sGroup;
                    nGroup.appendChild( nCell );
                    nTrs[i].parentNode.insertBefore( nGroup, nTrs[i] );
                    sLastGroup = sGroup;
                }
            }
        },
        "aoColumnDefs": [
            { "bVisible": false, "aTargets": [ 1 ] },
            [% UNLESS Settings.ClientBehavior.match("RES") # Setting supports reservations %]
                { "bVisible": false, "aTargets": [ 4 ] },
            [% END %]
        ],
        "aaSortingFixed": [[ 1, "asc" ]],
        "aaSorting": [[ 0, "asc" ]],
    } );

    $("#client-table-row-toolbar-make-reservation").click(function(){
        if ( ! $("#" + window.selected_id).children(":nth(3)").text() ) {
            $("#make-reservation-modal-for").text( $("#" + window.selected_id).children(":first").text() );

            $("#make-reservation-modal-for").text( $("#" + window.selected_id).children(":first").text() );

            $("#client-table-row-toolbar").hide();

            $("#make-reservation-modal-form-id").val( window.selected_id );

            $("#make-reservation-username").val("");
            $("#make-reservation-username").parent().removeClass("success warning error");

            $("#make-reservation-password").val("");
            $("#make-reservation-password").parent().removeClass("success warning error");

            $("#make-reservation-modal").modal();
            $("#make-reservation-username").focus();

            $("#make-reservation-modal-form-submit").removeAttr("disabled");
        } else {
            alert("[% c.loc("This client is already reserved") %]");
        }
    });

    $("#make-reservation-password").keypress(function(event) {
        if (event.which == 13) {
            event.preventDefault();
            $("#make-reservation-modal-form-submit").click();
        }
    });
    $("#make-reservation-modal-form-submit").click(function(){
        var errors = false;
        $("#make-reservation-username").parent().parent().removeClass("error");
        $("#make-reservation-password").parent().parent().removeClass("error");

        if ( ! $("#make-reservation-password").val() ) {
            errors = true;
            $("#make-reservation-password").parent().parent().addClass("error");
            $("#make-reservation-password").focus();
        }
 
       if ( ! $("#make-reservation-username").val() ) {
            errors = true;
            $("#make-reservation-username").parent().parent().addClass("error").focus();
            $("#make-reservation-username").focus();
        }

        if ( ! errors ) {
            $("#make-reservation-modal-form-submit").attr("disabled","disabled");

            $.post("[% c.uri_for("/api/public/reservations/create") %]", $("#make-reservation-modal-form").serialize(), function(data) {

                if ( data.success ) {
                    $("#make-reservation-modal").modal("hide");
                    DisplayMessage( "success", "[% c.loc("Reservation created.") %]" );
                    ForceClientTableRefresh();
                }
                else if ( data.reason == "INVALID_USER" || data.reason == "INVALID_PASSWORD" )  {
                    DisplayMessage( "error", "[% c.loc("Username & password do not match.") %]" );
                    $("#client-table-row-toolbar-make-reservation").click();
                }
                else if ( data.reason == "NO_TIME" ) {
                    DisplayMessage( "warning", "[% c.loc("You have no time remaining.") %]" );
                } 
                else if ( data.reason == "CLOSED" ) {
                    DisplayMessage( "warning", "[% c.loc("This kiosk is closed for the day.") %]" );
                } 
                else if ( data.reason == "CLIENT_USER_ALREADY_RESERVED" ) {
                    DisplayMessage( "warning", "[% c.loc("You have already reserved this client.") %]" );
                } 
                else if ( data.reason == "USER_ALREADY_RESERVED" ) {
                    DisplayMessage( "error", "[% c.loc("You have already reserved a client.") %]" );
                } 
                else if ( data.reason == "CLIENT_ALREADY_RESERVED" ) {
                    DisplayMessage( "error", "[% c.loc("This client is already reserved.") %]" );
                } 
                else if ( data.reason == "FEE_LIMIT" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive oustanding fees.") %]" );
                } 
                else if ( data.reason == "CHARGE_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your checkout privileges have been denied.") %]" );
                } 
                else if ( data.reason == "RENEWAL_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your renewal privileges have been denied.") %]" );
                } 
                else if ( data.reason == "RECALL_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your recall privileges have been denied.") %]" );
                } 
                else if ( data.reason == "HOLD_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your hold privileges have been denied.") %]" );
                } 
                else if ( data.reason == "CARD_REPORTED_LOST" ) {
                    DisplayMessage( "error", "[% c.loc("Your library card has been reported lost or stolen.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_ITEMS_CHARGED" ) {
                    DisplayMessage( "error", "[% c.loc("You have too many items checked out.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_ITEMS_OVERDUE" ) {
                    DisplayMessage( "error", "[% c.loc("You have too many overdue items.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_ITEMS_RENEWALS" ) {
                    DisplayMessage( "error", "[% c.loc("You have renewed too many items.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_CLAIMS_OF_ITEMS_RETURNED" ) {
                    DisplayMessage( "error", "[% c.loc("You have claimed returned for too many items.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_ITEMS_LOST" ) {
                    DisplayMessage( "error", "[% c.loc("You have lost too many items.") %]" );
                } 
                else if ( data.reason == "EXCESSIVE_OUTSTANDING_FINES" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive outstanding fines.") %]" );
                } 
                else if ( data.reason == "EXCESSIVE_OUTSTANDING_FEES" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive outstanding fees.") %]" );
                } 
                else if ( data.reason == "RECALL_OVERDUE" ) {
                    DisplayMessage( "error", "[% c.loc("You have an overdue item recall.") %]" );
                } 
                else if ( data.reason == "TOO_MANY_ITEMS_BILLED" ) {
                    DisplayMessage( "error", "[% c.loc("You have been billed for too many items.") %]" );
                } 
                else if ( data.reason == "AGE_MISMATCH" ) {
                    DisplayMessage( "error", "[% c.loc("You are not of the appropriate age to use this client.") %]" );
                } 
                else {
                    DisplayMessage( "error", data.reason );
                }

            });
        }
    });

    $("#client-table-row-toolbar-cancel-reservation").click(function(){
        if ( $("#" + window.selected_id).children(":nth(3)").text() ) {
            $("#cancel-reservation-modal-for").text( $("#" + window.selected_id).children(":first").text() );

            $("#client-table-row-toolbar").hide();

            $("#cancel-reservation-modal-form-id").val( window.selected_id );

            $("#cancel-reservation-password").val("");
            $("#cancel-reservation-password").parent().removeClass("success warning error");

            $("#cancel-reservation-modal").modal();
            $("#cancel-reservation-password").focus();

            $("#cancel-reservation-modal-form-submit").removeAttr("disabled");
        } else {
            alert("[% c.loc("This client is not currently reserved.") %]");
        }
    });

    $("#cancel-reservation-password").keypress(function(event) {
        if (event.which == 13) {
            event.preventDefault();
            $("#cancel-reservation-modal-form-submit").click();
        }
    });
    $("#cancel-reservation-modal-form-submit").click(function(){
        var errors = false;
        $("#cancel-reservation-password").parent().parent().removeClass("error");

        if ( ! $("#cancel-reservation-password").val() ) {
            errors = true;
            $("#cancel-reservation-password").parent().parent().addClass("error");
            $("#cancel-reservation-password").focus();
        }
 
        if ( ! errors ) {
            $("#cancel-reservation-modal-form-submit").attr("disabled","disabled");

            $.post("[% c.uri_for("/api/public/reservations/delete") %]", $("#cancel-reservation-modal-form").serialize(), function(data) {

                if ( data.success ) {
                    $("#cancel-reservation-modal").modal("hide");
                    DisplayMessage( "success", "[% c.loc("Reservation canceled.") %]" );
                    ForceClientTableRefresh();
                }
                else if ( data.reason == "UNKOWN" ) {
                    DisplayMessage( "error", "[% c.loc("Your reservation cancelation failed for an unknown reason.") %]" );
                } 
                else  {
                    DisplayMessage( "error", "[% c.loc("Incorrect password.") %]" );
                    $("#client-table-row-toolbar-cancel-reservation").click();
                }

            });
        }
    });

    window.setInterval( function(){ ForceClientTableRefresh() }, 5000 );
});

/*********** Helper Functions ***********/
function ForceClientTableRefresh() {
     $("#client-table").dataTable().fnDraw(true);
}

function ClientTableUpdateLocationFilter( location ) {
    window.location_filter = location;
    ForceClientTableRefresh();
}

</script>
