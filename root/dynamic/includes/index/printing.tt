[%- SET public_print_release = c.get_printer_configuration.public_print_release %]
<div class="container">
    <div class="row">
        <div class="col">
            <fieldset class="">
                <legend class="">[% c.loc("Upload file to print") %]</legend>
                [% IF c.req.params.error == "INVALID_FILETYPE" %]
                    <div class="alert alert-danger" role="alert">
                        [% c.loc('Filetype was invalid, file uploads must be PDF.') %]
                        [% c.loc('If your file is not a PDF, you may use a PDF printer such as <a target="_blank" class="alert-link" href="https://www.cutepdf.com/Products/CutePDF/writer.asp">CutePDF</a>,') %]
                        [% c.loc('or a <a target="_blank" class="alert-link" href="https://www.freepdfconvert.com/">web based PDF converter</a>.') %]
                    </div>
                [% ELSE %]
                    <div class="alert alert-info" role="alert">
                        [% c.loc('If your file is not a PDF, you may use a PDF printer such as <a target="_blank" class="alert-link" href="https://www.cutepdf.com/Products/CutePDF/writer.asp">CutePDF</a>,') %]
                        [% c.loc('or a <a target="_blank" class="alert-link" href="https://www.freepdfconvert.com/">web based PDF converter</a>.') %]
                    </div>
                [% END %]
                <form action="[% c.uri_for('upload_print_file') %]" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroupFileAddon01">[% c.loc("Upload") %]</span>
                            </div>
                            <div class="custom-file">
                                <input type="file" accept="application/pdf" class="form-control custom-file-input" name="print_file" id="print_file"
                                    aria-describedby="inputGroupFileAddon01" required/>
                                <label class="custom-file-label" for="inputGroupFile01">[% c.loc("Choose file") %]</label>
                            </div>
                        </div>
                    </div>

                    <p/>

                    <div class="form-group">
                        <label for="printer_id">[% c.loc("Select a printer") %]</label>
                        [% FOREACH p IN c.get_printer_configuration.printers %]
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="printer_id" id="printer-[% p.key %]" value="[% p.key %]" required>
                                <label class="form-check-label" for="printer-[% p.key %]">[% p.value.public_printer_name | html %]</label>
                            </div>
                        [% END %]
                    </div>

                    <button type="submit" class="btn btn-primary"><i class="fa fa-upload"></i> [% c.loc("Upload") %]</button>
                </form>
            </fieldset>
        </div>
    </div>

    <p/>

    <div class="container">
        <h4>Funds available for printing: <span id="user-funds">0</span></h4>
        <span id="print-button-warning-text" class="form-text text-muted">
            [% c.loc('If enough funds are available, printing will start immediately when the "Print" button is clicked.') %]
        </span>
        <table id="print-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
            <thead>
            <th>[% c.loc("Type") %]</th>
            <th>[% c.loc("Status") %]</th>
            <th>[% c.loc("Copies") %]</th>
            <th>[% c.loc("Pages") %]</th>
            <th>[% c.loc("Client") %]</th>
            <th>[% c.loc("Created") %]</th>
            <th>[% c.loc("Printer") %]</th>
            <th>[% c.loc("Cost") %]</th>
            <th>&nbsp;</th>
            <th>&nbsp;</th>
            </thead>
        </table>
    </div>
</div>


<script type="text/javascript">
$(document).ready(function() {
    // Update filename display in custom file input
    $(".custom-file-input").on("change", function() {
        const fileName = $(this).val().split("\\").pop();
        $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
    });

    const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    });

    let user_funds = 0;

    async function fetchUserFundsAndUpdateUI() {
        try {
            const res = await fetch("/public/api/user/funds");
            const data = await res.json();
            user_funds = data.funds;
            $('#user-funds').html(formatter.format(user_funds));
        } catch (err) {
            console.error("Error fetching user funds:", err);
        }
    }

    fetchUserFundsAndUpdateUI();
    setInterval(fetchUserFundsAndUpdateUI, 60000);

    const pTable = $('#print-table').DataTable({
        [% IF !c.language.match('en') %]
        language: {
            url: "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json"
        },
        [% END %]
        processing: true,
        serverSide: true,
        responsive: true,
        ajax: {
            url: '[% c.uri_for('/public/api/datatables/prints') %]',
        },
        columns: [
          { data: '0', title: 'Source' },
          { data: '1', title: 'Status' },
          { data: '2', title: 'Pages' },
          { data: '3', title: 'Copies' },
          { data: '4', title: 'Submitted From' },
          { data: '5', title: 'Submitted At' },
          { data: '6', title: 'Printer' },
          { data: '7', title: 'Cost' },
          { data: null, title: '', orderable: false, searchable: false }, // For print button
          { data: null, title: '', orderable: false, searchable: false }  // For cancel button
        ],
        initComplete: function () {
            setInterval(() => {
                $('#print-table').DataTable().draw(false);
            }, 10000);
        },
        columnDefs: [
            {
                targets: [8],
                className: "[% IF public_print_release == 'disabled' %]display-none[% END %]"
            }
        ],
        order: [[5, "desc"]],
        rowCallback: async function(nRow, aData) {
            const print_job_id = aData["print_job_id"];
            const not_held = aData["status"] !== "Held";

            $('td:eq(7)', nRow).html(formatter.format(0));

            // Localize content
            $('td:eq(0)', nRow).html(aData[0].replace("PrintManager", `[% c.loc("Print Manager") %]`));
            $('td:eq(1)', nRow).html(aData[1].replace("In_progress", `[% c.loc("In progress") %]`));
            $('td:eq(4)', nRow).html(aData[4].replace("__PRINT_FROM_WEB__", `<em>[% c.loc("Uploaded from Web") %]</em>`));
            $('td:eq(5)', nRow).html(aData[5].replace("T", " "));

            // Printer dropdown logic
            const sel = document.createElement("select");
            const sel_id = "printer-select-" + print_job_id;
            sel.id = sel_id;

            const existing_sel = $("#" + sel_id);
            if (aData["printer_costs"]) {
                const printer_costs = JSON.parse(aData["printer_costs"]);

                for (let pc of printer_costs) {
                    const opt = document.createElement("option");
                    opt.value = pc.id;
                    opt.text = pc.name;
                    opt.dataset.cost = pc.cost;

                    if (existing_sel.length && aData["status"] === "Held" && pc.id === existing_sel.val()) {
                        opt.selected = true;
                    } else if (pc.selected) {
                        opt.selected = true;
                    }

                    sel.add(opt);
                }

                if (not_held) sel.disabled = true;

                sel.addEventListener("change", function() {
                    const cost = this.options[this.selectedIndex].dataset.cost;
                    $('td:eq(7)', nRow).html(formatter.format(cost));

                    const btn = $("#print-btn-" + print_job_id);
                    if (cost > user_funds) {
                        btn.prop("disabled", true).addClass("disabled");
                    } else {
                        btn.prop("disabled", false).removeClass("disabled");
                    }
                });

                $('td:eq(6)', nRow).append(sel);
            }

            // Cost column
            const selected_cost = sel.options[sel.selectedIndex]?.dataset.cost ?? 0;
            $('td:eq(7)', nRow).html(formatter.format(selected_cost));

            // Print button
            let html = "";
            [% IF public_print_release != "disabled" %]
                if (not_held || selected_cost > user_funds) {
                    html = `<a id="print-btn-${print_job_id}" data-jobid="${print_job_id}" class="btn btn-primary print-release disabled" disabled aria-disabled="true" href="#" role="button"><i class="fa fa-print"></i> Print</a>`;
                } else {
                    html = `<a id="print-btn-${print_job_id}" data-jobid="${print_job_id}" class="btn btn-primary print-release" href="#" role="button"><i class="fa fa-print"></i> Print</a>`;
                }
            [% ELSE %]
                html = "&nbsp;";
            [% END %]
            $('td:eq(8)', nRow).html(html);

            // Cancel button
            if (not_held) {
                html = `<a id="cancel-btn-${print_job_id}" class="btn btn-danger print-cancel disabled" disabled aria-disabled="true" href="#" role="button"><i class="fa fa-ban"></i> Cancel</a>`;
            } else {
                html = `<a id="cancel-btn-${print_job_id}" class="btn btn-danger print-cancel" data-jobid="${print_job_id}" href="#" role="button"><i class="fa fa-ban"></i> Cancel</a>`;
            }
            $('td:eq(9)', nRow).html(html);
        }
    });

    // Print handler
    $("#print-table").on("click", "a.print-release", async function(e) {
        e.preventDefault();
        const job_id = $(this).data("jobid");
        const printer = $("#printer-select-" + job_id).val();

        const confirmed = confirm("[% c.loc('Job will be released to the printer immediately, are you sure you want to do this?') %]");
        if (confirmed) {
            const res = await fetch(`/public/api/user/release_print_job?id=${job_id}&printer=${printer}`);
            const data = await res.json();
            alert(data.success ? "[% c.loc('Print job released for printing!') %]" : data.error);
            $("#print-table").DataTable().draw(false);
        }
    });

    // Cancel handler
    $("#print-table").on("click", "a.print-cancel", async function(e) {
        e.preventDefault();
        const job_id = $(this).data("jobid");

        const confirmed = confirm("[% c.loc('Are you sure you want to cancel this print job?') %]");
        if (confirmed) {
            const res = await fetch(`/public/api/user/cancel_print_job?id=${job_id}`);
            const data = await res.json();
            alert(data.success ? "[% c.loc('Print job canceled!') %]" : data.error);
            $("#print-table").DataTable().draw(false);
        }
    });
});
</script>
