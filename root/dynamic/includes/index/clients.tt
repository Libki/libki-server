<nav class="navbar navbar-expand-lg navbar-light bg-none">
    <ul class="nav nav-pills" id="primary-tabs">
        <li class="nav-item">
            <a class="nav-link disabled" href="#">[% c.loc("Location") %]:</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" data-toggle="pill" href="#" data-location="" >[% c.loc("All") %]</a>
        </li>
        [% FOREACH location IN locations %]
            <li class="nav-item">
                <a class="nav-link" data-toggle="pill" href="#" data-location="[% location | html %]">[% location | html %]</a>
            </li>
        [% END %]
    </ul>
</nav>

<table id="client-table" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered">
    <thead>
        <th data-priority="1">[% c.loc("Client") %]</th>
        <th data-priority="10">[% c.loc("Location") %]</th>
        <th data-priority="9">[% c.loc("Type") %]</th>
        <th data-priority="2">[% c.loc("Status") %]</th>
        <th data-priority="4">[% c.loc("Time remaining") %]</th>
        <th data-priority="5">[% c.loc("Reservation status") %]</th>
        <th data-priority="3">[% c.loc("Actions") %]</th>
    </thead>
</table>

<div class="modal fade" id="make-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="make-reservation-modal-label" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="make-reservation-modal-label"><i class="fas fa-tag"></i> [% c.loc("Make reservation for") %]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="make-reservation-modal-form" class="form-horizontal">
                    <input id="make-reservation-modal-form-id" name="id" type="hidden" />
                    <div class="form-group">
                        <div id="reservation-time" class="is-invalid">
                            <input id="datepicker" type="text" value="" width='400px' readonly="readonly"
                                   name="reservation_date">

                            <select id="reservation-hour" name="reservation_hour" onchange="getMinute()" required></select>
                            :
                            <select id="reservation-minute" name="reservation_minute" required></select>

                            <span id="make-reservation-ampm-label"
                                  style="visibility:[% IF Settings.TimeDisplayFormat == '12' %]visible[% ELSE %]hidden[% END %];"></span>
                        </div>
                        <div id="reservation-time-invalid-feedback" class="invalid-feedback">
                            [% c.loc("Selected time is invalid, no time blocks are available for this hour") %]
                        </div>
                    </div>
                    [% IF !c.user_exists %]
                        <div class="form-group">
                            <label for="make-reservation-username">[% c.loc("Username") %]</label>
                            <input type="text" class="form-control" id="make-reservation-username" name="username" />
                            <div class="invalid-feedback">
                                [% c.loc("Username is required") %]
                            </div>

                            <label for="make-reservation-password">[% c.loc("Password") %]</label>
                            <input type="password" class="form-control" id="make-reservation-password" name="password" />
                            <div class="invalid-feedback">
                                [% c.loc("Password is required") %]
                            </div>
                        </div>
                    [% END %]

                    [% IF c.user_exists %]
                        <input id="make-reservation-session" type="hidden" value="true"/>
                    [% END %]
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">[% c.loc("Cancel") %]</button>
                <button id="make-reservation-modal-form-submit" class="btn btn-primary">[% c.loc("Make reservation") %]</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cancel-reservation-modal" tabindex="-1" role="dialog" aria-labelledby="cancel-reservation-modal-label" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancel-reservation-modal-label"><i class="fas fa-minus-square"></i> [% c.loc("Cancel reservation") %]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="cancel-reservation-modal-form" class="form-horizontal">
                    <input id="cancel-reservation-modal-form-id" name="id" type="hidden" />
                    [% IF !c.user_exists %]
                        <div class="form-group">
                            <label for="cancel-reservation-username">[% c.loc("Username") %]</label>
                            <input type="text" class="form-control" id="cancel-reservation-username" name="username" />
                            <div class="invalid-feedback">
                                [% c.loc("Username is required") %]
                            </div>
                            <label for="cancel-reservation-password">[% c.loc("Password") %]</label>
                            <input type="password" class="form-control" id="cancel-reservation-password" name="password" />
                            <div class="invalid-feedback">
                                [% c.loc("Password is required") %]
                            </div>
                        </div>
                    [% END  %]

                    [% IF c.user_exists %]
                        <input id="cancel-reservation-session" type="hidden" value="true"/>
                    [% END %]
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal">[% c.loc("Cancel") %]</button>
                <button id="cancel-reservation-modal-form-submit" class="btn btn-danger">[% c.loc("Cancel reservation") %]</button>
            </div>
        </div>
    </div>
</div>

<script>
    $('#cancel-reservation-modal').on('shown.bs.modal', function (event) {
        $('#cancel-reservation-username').trigger('focus');

        var button = $(event.relatedTarget);
        var client_id = button.data('client-id');
        var modal = $(this);
        modal.find('#cancel-reservation-modal-form-id').val(client_id);
    });

    $('#make-reservation-modal').on('shown.bs.modal', function (event) {
        $('#datepicker').trigger('change');

        var button = $(event.relatedTarget);
        var client_id = button.data('client-id');
        var modal = $(this);
        modal.find('#make-reservation-modal-form-id').val(client_id);
   });

    $('#datepicker').on('change', function(){
        $("#make-reservation-ampm-label").text('');
    });

    $('#reservation-hour').on('change',function(){
        formatHour("reservation-hour","make-reservation-ampm-label");
    });

    $('#reservation-hour').on('click',function(){
        formatHour("reservation-hour","make-reservation-ampm-label");
    });
</script>

<script type="text/javascript">
$(document).ready(function() {
    const cTable = $("#client-table").DataTable({
        [% IF !c.language.match('en') %]
        language: {
            url: "https://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/[% c.installed_languages.${c.language} %].json"
        },
        [% END %]
        paging: false,
        searching: false,
        processing: false,
        responsive: true,
        serverSide: true,
        ajax: function(data, callback, settings) {
            if (window.location_filter) {
                data.location_filter = window.location_filter;
            }

            $.getJSON("[% c.uri_for("/api/public/datatables/clients") %]", data, function(json) {
                callback(json);
            });
        },
        columns: [
            { // Client name
                data: 0,
                contentPadding: 'mm'
            },
            { // Location
                data: 1,
                visible: false
            },
            { // Type
                data: 2,
                visible: false
            },
            { // Status
                data: 3,
                render: function(data,type,row) {
                    return data ? "[% c.loc("In use") %]" : "[% c.loc("Available") %]";
                }
            },
            { // Time remaining
                data: 4,
                render: function(data,type,row) {
                    return data ? data + " [% c.loc("Minutes") %]" : '';
                }
            },
            {  // Reservation Status
                data: 5,
                defaultContent: '',
                visible: [% IF Settings.ClientBehavior.match("RES") %]true[% ELSE %]false[% END %],
                render: function(data,type,row) {
                    if (data !== null) {
                        const rs_setting = '[% Settings.ReservationShowUsername %]';
                        const startTime = strftime(DateTimeDisplayFormat, new Date(row[7]));
                        const username = row[5];
                        const firstlast = row[6];

                        switch (rs_setting) {
                            case 'RSUN':
                                return `[% c.loc("First reservation by") %] <i>${username}</i> [% c.loc("starting") %] ${startTime}`;
                            case 'RSFN':
                                return `[% c.loc("First reservation by") %] <i>${firstlast}</i> [% c.loc("starting") %] ${startTime}`;
                            case 'RSA':
                                return `[% c.loc("First reservation") %] [% c.loc("starting") %] ${startTime}`;
                            default:
                                return "[% c.loc("Reserved") %]";
                        }
                    }
                }
            },
            { // Actions
                data: null,
                title: 'Actions',
                orderable: false,
                searchable: false,
                visible: [% IF Settings.ClientBehavior.match("RES") %]true[% ELSE %]false[% END %],
                render: function(data,type,row) {
                    let html = '<div class="btn-group" role="group">';
                    html += `<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#make-reservation-modal" data-client-id="${row['DT_RowId']}">`;
                    html += '<i class="fas fa-tag"></i> Make reservation';
                    html += '</button>';
                    html += `<button type="button" class="btn btn-danger" data-toggle="modal" data-target="#cancel-reservation-modal" data-client-id="${row['DT_RowId']}">`;
                    html += '<i class="fas fa-minus-square"></i> Cancel reservation';
                    html += '</button>';
                    html += '</div>';
                    return html;
                }
            }
        ],
        order: [[1, "asc"], [0, "asc"]],
        drawCallback: function(settings) {
            AddTableRowToolbar($("#client-table-row-toolbar"), $("#client-table"), $("#client-table tbody tr"));

            if (settings.aoData.length === 0) return;

            const nTrs = $("#client-table tbody tr").toArray();
            const iColspan = nTrs[0].getElementsByTagName("td").length;
            let sLastGroup = "";

            for (let i = 0; i < nTrs.length; i++) {
                const iDisplayIndex = settings._iDisplayStart + i;
                const sGroup = settings.aoData[settings.aiDisplay[iDisplayIndex]]._aData[1];

                if (sGroup !== sLastGroup) {
                    const nGroup = document.createElement("tr");
                    const nCell = document.createElement("td");
                    nCell.colSpan = iColspan;
                    nCell.className = "group";
                    nCell.innerHTML = sGroup;
                    nGroup.appendChild(nCell);
                    nTrs[i].parentNode.insertBefore(nGroup, nTrs[i]);
                    sLastGroup = sGroup;
                }
            }
        }
    });

    $("#make-reservation-password").keypress(function(event) {
        if (event.which == 13) {
            event.preventDefault();
            $("#make-reservation-modal-form-submit").click();
        }
    });
    $("#make-reservation-modal-form-submit").click(function(){
        var errors = false;
        $("#make-reservation-username").removeClass("is-invalid");
        $("#make-reservation-password").removeClass("is-invalid");

       if ( ! $("#reservation-hour").val() || ! $("#reservation-minute").val()) {
            errors = true;
            $("#reservation-minute").addClass("is-invalid");
        }

        if ( ! $("#make-reservation-password").val() && ! $("#make-reservation-session").val()) {
            errors = true;
            $("#make-reservation-password").addClass("is-invalid");
            $("#make-reservation-password").focus();
        }

       if ( ! $("#make-reservation-username").val()  && ! $("#make-reservation-session").val()) {
            errors = true;
            $("#make-reservation-username").addClass("is-invalid");
            $("#make-reservation-username").focus();
        }

        if ( ! errors ) {
            $("#make-reservation-modal-form-submit").attr("disabled","disabled");
                $.post("[% c.uri_for("/api/public/reservations/create") %]", $("#make-reservation-modal-form").serialize(), function(data) {
                    if ( data.success ) {
                        $("#make-reservation-modal").modal("hide");
                    DisplayMessage( "success", "[% c.loc("Reservation created.") %]" );
                    ForceClientTableRefresh();
                }
                else if ( data.reason == "MINIMUM_TIME" )  {
                    DisplayMessage( "error", "[% c.loc("You don't have enough time for a minimum reservation.") %]" );
                }
                else if ( data.reason == "INVALID_TIME" )  {
                    DisplayMessage( "error", "[% c.loc("The time you chose is not available.") %]" );
                    $("#client-table-row-toolbar-make-reservation").click();
                }
                else if ( data.reason == "INVALID_USER" || data.reason == "INVALID_PASSWORD" )  {
                    DisplayMessage( "error", "[% c.loc("Username & password do not match.") %]" );
                    $("#client-table-row-toolbar-make-reservation").click();
                }
                else if ( data.reason == "INVALID_USER" || data.reason == "CLOSING_TIME" )  {
                    DisplayMessage( "error", "[% c.loc("This kiosk will be closed at the time you chose.") %]" );
                    $("#client-table-row-toolbar-make-reservation").click();
                }
                else if ( data.reason == "NO_TIME" ) {
                    DisplayMessage( "warning", "[% c.loc("You have no time remaining.") %]" );
                }
                else if ( data.reason == "CLOSED" ) {
                    DisplayMessage( "warning", "[% c.loc("This kiosk is closed for the day.") %]" );
                }
                else if ( data.reason == "CLIENT_USER_ALREADY_RESERVED" ) {
                    DisplayMessage( "warning", "[% c.loc("You have already reserved this client.") %]" );
                }
                else if ( data.reason == "USER_ALREADY_RESERVED" ) {
                    DisplayMessage( "error", "[% c.loc("You have already reserved a client.") %]" );
                }
                else if ( data.reason == "CLIENT_ALREADY_RESERVED" ) {
                    DisplayMessage( "error", "[% c.loc("This client is already reserved.") %]" );
                }
                else if ( data.reason == "FEE_LIMIT" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive oustanding fees.") %]" );
                }
                else if ( data.reason == "CHARGE_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your checkout privileges have been denied.") %]" );
                }
                else if ( data.reason == "RENEWAL_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your renewal privileges have been denied.") %]" );
                }
                else if ( data.reason == "RECALL_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your recall privileges have been denied.") %]" );
                }
                else if ( data.reason == "HOLD_PRIVILEGES_DENIED" ) {
                    DisplayMessage( "error", "[% c.loc("Your hold privileges have been denied.") %]" );
                }
                else if ( data.reason == "CARD_REPORTED_LOST" ) {
                    DisplayMessage( "error", "[% c.loc("Your library card has been reported lost or stolen.") %]" );
                }
                else if ( data.reason == "TOO_MANY_ITEMS_CHARGED" ) {
                    DisplayMessage( "error", "[% c.loc("You have too many items checked out.") %]" );
                }
                else if ( data.reason == "TOO_MANY_ITEMS_OVERDUE" ) {
                    DisplayMessage( "error", "[% c.loc("You have too many overdue items.") %]" );
                }
                else if ( data.reason == "TOO_MANY_ITEMS_RENEWALS" ) {
                    DisplayMessage( "error", "[% c.loc("You have renewed too many items.") %]" );
                }
                else if ( data.reason == "TOO_MANY_CLAIMS_OF_ITEMS_RETURNED" ) {
                    DisplayMessage( "error", "[% c.loc("You have claimed returned for too many items.") %]" );
                }
                else if ( data.reason == "TOO_MANY_ITEMS_LOST" ) {
                    DisplayMessage( "error", "[% c.loc("You have lost too many items.") %]" );
                }
                else if ( data.reason == "EXCESSIVE_OUTSTANDING_FINES" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive outstanding fines.") %]" );
                }
                else if ( data.reason == "EXCESSIVE_OUTSTANDING_FEES" ) {
                    DisplayMessage( "error", "[% c.loc("You have excessive outstanding fees.") %]" );
                }
                else if ( data.reason == "RECALL_OVERDUE" ) {
                    DisplayMessage( "error", "[% c.loc("You have an overdue item recall.") %]" );
                }
                else if ( data.reason == "TOO_MANY_ITEMS_BILLED" ) {
                    DisplayMessage( "error", "[% c.loc("You have been billed for too many items.") %]" );
                }
                else if ( data.reason == "AGE_MISMATCH" ) {
                    DisplayMessage( "error", "[% c.loc("You are not of the appropriate age to use this client.") %]" );
                }
                else {
                    DisplayMessage( "error", data.reason );
                }

            });
        }
    });

    $("#cancel-reservation-password").keypress(function(event) {
        if (event.which == 13) {
            event.preventDefault();
            $("#cancel-reservation-modal-form-submit").click();
        }
    });
    $("#cancel-reservation-modal-form-submit").click(function(){
        var errors = false;
        $("#cancel-reservation-password").removeClass("is-invalid");

        if ( ! $("#cancel-reservation-username").val() && ! $("#cancel-reservation-session").val()) {
             errors = true;
             $("#cancel-reservation-username").addClass("is-invalid");
             $("#cancel-reservation-username").focus();
         }

        if ( ! $("#cancel-reservation-password").val() && ! $("#cancel-reservation-session").val()) {
            errors = true;
            $("#cancel-reservation-password").addClass("is-invalid");
            $("#cancel-reservation-password").focus();
        }

        if ( ! errors ) {
            $("#cancel-reservation-modal-form-submit").attr("disabled","disabled");

            $.post("[% c.uri_for("/api/public/reservations/delete") %]", $("#cancel-reservation-modal-form").serialize(), function(data) {

                if ( data.success ) {
                    $("#cancel-reservation-modal").modal("hide");
                    DisplayMessage( "success", "[% c.loc("Reservation canceled.") %]" );
                    ForceClientTableRefresh();
                }
                else if ( data.reason == "UNKNOWN" ) {
                    DisplayMessage( "error", "[% c.loc("Your reservation cancelation failed for an unknown reason.") %]" );
                }
                else if ( data.reason == "NOTFOUND" ) {
                    DisplayMessage( "error", "[% c.loc("You have no reservation on this kiosk.") %]" );
                }
                else  {
                    DisplayMessage( "error", "[% c.loc("Incorrect password.") %]" );
                    $("#client-table-row-toolbar-cancel-reservation").click();
                }

            });
        }
    });

    $('#primary-tabs .nav-link').click(function() {
        const location = $(this).data('location');
        ClientTableUpdateLocationFilter(location);
    });

    window.setInterval( function(){ ForceClientTableRefresh() }, 5000 );

  /*********** Helper Functions ***********/
  function ForceClientTableRefresh() {
     cTable.draw(true);
  }

  window.ClientTableUpdateLocationFilter = function( location ) {
    window.location_filter = location;
    $("#client-table-row-toolbar").hide();
    ForceClientTableRefresh();
  }

  $('#datepicker').datepicker({
     dateFormat:'yy-mm-dd',
     minDate:'%y-%M-%d',
     gotoCurrent: true,
  });

  $("#datepicker").datepicker("setDate", new Date());

  $("#datepicker").change(function () {
    format = [% Settings.TimeDisplayFormat %];
    getTime("[% c.uri_for("/api/public/reservations/gettimelist") %]",format);
  });
});

</script>
